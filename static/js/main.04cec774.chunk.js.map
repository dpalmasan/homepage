{"version":3,"sources":["components/Nav.js","components/withLayout.js","pages/Home.js","pages/About.js","pages/lectures/Setup.js","pages/lectures/PythonMisc.js","pages/lectures/WeekOne.js","pages/lectures/WeekTwo.js","pages/lectures/WeekThree.js","pages/lectures/WeekFour.js","pages/data_science/WeekFive.js","pages/data_science/WeekSix.js","pages/data_science/WeekSeven.js","components/SolutionButton.js","pages/lectures/WeekOneRepaso.js","App.js","serviceWorker.js","index.js"],"names":["Nav","className","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","to","withLayout","Page","role","target","rel","href","icon","faLinkedin","faGithub","faBook","class","Row","Col","xs","sm","md","Image","src","process","fluid","language","style","docco","useState","showSol1","setLoadingSol1","math","Button","variant","onClick","without","SolutionButton","props","state","toggle","setToggle","bind","this","setState","sol","React","Component","solEx1","solEx3","solEx5","solEx7","solEx9","App","window","location","hash","decodeURIComponent","scrollToAnchor","hashParts","split","length","slice","document","querySelector","scrollIntoView","onhashchange","basename","path","Boolean","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.04cec774.chunk.js","sourcesContent":["import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nfunction Nav() {\n  return (\n    <nav className='navbar navbar-expand-md navbar-dark fixed-top bg-dark'>\n      <span className='navbar-brand'>\n        Bienvenido\n      </span>\n      <button\n        className='navbar-toggler'\n        type='button'\n        data-toggle='collapse'\n        data-target='#navbarCollapse'\n        aria-controls='navbarCollapse'\n        aria-expanded='false'\n        aria-label='Toggle navigation'>\n        <span className='navbar-toggler-icon' />\n      </button>\n      <div className='collapse navbar-collapse' id='navbarCollapse'>\n        <ul className='navbar-nav mr-auto'>\n          <li className='nav-item active'>\n            <Link to=\"/\" className=\"nav-link\">Inicio<span className='sr-only'>(current)</span></Link>\n          </li>\n          <li className='nav-item'>\n          <Link to=\"/about\" className=\"nav-link\">Sobre mí</Link>\n          </li>\n        </ul>\n      </div>\n    </nav>\n  );\n}\n\nexport default Nav;","import React from \"react\";\nimport Nav from \"./Nav\";\n\nfunction withLayout(Page) {\n  return () => {\n    return (\n      <>\n        <header>\n          {/* Fixed navbar */}\n          <Nav />\n        </header>\n        {/* Begin page content */}\n        <main role='main' className='flex-shrink-0'>\n          <Page />\n        </main>\n        <br />\n        <footer className='footer mt-auto py-3 bg-dark text-white'>\n          <div className='container'>&copy; Diego Palma 2020</div>\n        </footer>\n      </>\n    );\n  };\n}\n\nexport default withLayout;","import React from \"react\";\nimport withLayout from \"../components/withLayout\";\nimport { Link } from \"react-router-dom\";\n\n\nfunction module1() {\n    return (\n        <>\n            <h3>Introducción a la Programación con Python</h3>\n            <h4>Semana 1: Introducción a la Programación</h4>\n            <ul>\n                <li><Link to=\"/setup\">Configuración e iniciando con la terminal</Link></li>\n                <li><Link to=\"/python_misc\">Cómo escribir buen código Python</Link></li>\n                <li><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://stackoverflow.com\">\n                    StackOverflow (sitio para buscar información sobre programación preguntas/respuestas, etc)</a></li>\n                <li><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://hackerrank.com\">\n                    Sitio con ejercicios para practicar python (hay muchos problemas de entrevistas)</a></li>\n                <li><Link to=\"/week1\">Ejercicios complementarios semana 1</Link></li>\n                <li><Link to=\"/week1_repaso\">Ejercicios Repaso Introducción a Python</Link></li>\n            </ul>\n            <h4>Semana 2: Ciclos y Métodos</h4>\n            <ul>\n                <li><Link to=\"/week2\">Ejercicios complementarios semana 2</Link></li>\n            </ul>\n            <h4>Semana 3: Estructuras de Datos</h4>\n            <ul>\n                <li><Link to=\"/week3\">Material Complementario semana 3</Link></li>\n            </ul>\n            <h4>Semana 4: API (web)</h4>\n            <ul>\n                <li><Link to=\"/week4\">Material Complementario semana 4</Link></li>\n            </ul>\n        </>\n    )\n}\n\nfunction module2() {\n    return (\n        <>\n            <h3>Fundamentos Data Science</h3>\n            <h4>Semana 5: Estadística univariada y control de flujo</h4>\n            <ul>\n                <li><Link to=\"/week5\">Material complementario y tips semana 5</Link></li>\n            </ul>\n            <h4>Semana 6: Probabilidades y funciones</h4>\n            <ul>\n                <li><Link to=\"/week6\">Material complementario y tips semana 6</Link></li>\n            </ul>\n            <h4>Semana 7: Variables Aleatorias y Gráficos</h4>\n            <ul>\n                <li><Link to=\"/week7\">Material complementario y tips semana 7</Link></li>\n            </ul>\n        </>\n    )\n}\n\n\nfunction Home() {\n    return (\n        <div className='container'>\n            <h1 className='mt-5'>Material Complementario Desafío LATAM Data Science</h1>\n            <p className='lead'>\n                Si llegaste a este sitio web, probablemente estés cursando la carrera de Data Science en desafío LATAM (este sitio\n                lo creé para la generación G con fecha <code>11/06/2020</code>). El propósito de este sitio es sólo agregar material\n                complementario, algunas recomendaciones para ayudarte a digerir mejor los contenidos del curso. También pueden pedirme\n                que agregue información en caso de que lo necesiten.\n            </p>\n            <h2>Material Complementario y Miscelaneos</h2>\n            {module1()}\n            {module2()}\n        </div>\n    )\n}\n\nexport default withLayout(Home);","import React from \"react\";\nimport withLayout from \"../components/withLayout\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faLinkedin, faGithub } from \"@fortawesome/free-brands-svg-icons\"\nimport { faBook } from '@fortawesome/free-solid-svg-icons'\n\nfunction About() {\n    return (\n        <div className='container'>\n            <h1 className='mt-5'>Un poco sobre mí</h1>\n            <p className='lead'>\n                Esta sección es por si tienes la duda <em>¿Y este individuo quién es?</em> Dejo un poco de información sobre mí.\n            </p>\n            <h2 className='mt-5'>Sitios</h2>\n            <div className=\"row\">\n              <div className=\"col-sm-6\">\n              <a href=\"https://www.linkedin.com/in/dpalmasan/\" target=\"_blank\" rel=\"noopener noreferrer\"><FontAwesomeIcon icon={faLinkedin} /> LinkedIn</a>\n              </div>\n            </div>\n            <div className=\"row\">\n            <div className=\"col-sm-6\">\n              <a href=\"https://github.com/dpalmasan\" target=\"_blank\" rel=\"noopener noreferrer\"><FontAwesomeIcon icon={faGithub} /> Github</a>\n            </div>\n            </div>\n            <div className=\"row\">\n            <div className=\"col-sm-6\">\n              <a href=\"https://trunajod20.readthedocs.io/en/latest/\" target=\"_blank\" rel=\"noopener noreferrer\"><FontAwesomeIcon icon={faBook} /> TRUNAJOD (proyecto opensource en python)</a>\n            </div>\n            </div>\n            <h2 className='mt-5'>Experiencia</h2>\n            <div className=\"row\">\n              <div className=\"col-sm-6\">\n                <p>Diciembre 2019 - actualidad</p>\n              </div>\n              <div className=\"col-sm-6\">\n                <p>Ingeniero de Datos en <a href=\"https://evernote.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Evernote</a></p>\n              </div>\n            </div>\n            <div className=\"row\">\n              <div className=\"col-sm-6\">\n                <p>Diciembre 2017 - actualidad</p>\n              </div>\n              <div className=\"col-sm-6\">\n                <p>Ingeniero de I+D en Universidad de Concepción.</p>\n              </div>\n            </div>\n            <div className=\"row\">\n              <div className=\"col-sm-6\">\n                <p>Junio 2019 - Diciembre 2019</p>\n              </div>\n              <div className=\"col-sm-6\">\n                <p>Científico de datos en Everis</p>\n              </div>\n            </div>\n            <div className=\"row\">\n              <div className=\"col-sm-6\">\n                <p>Mayo 2017 - Junio 2019</p>\n              </div>\n              <div className=\"col-sm-6\">\n                <p>Ingeniero de Calidad de Software en <a href=\"https://www.synopsys.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Synopsys</a></p>\n              </div>\n            </div>\n            <div className=\"row\">\n              <div className=\"col-sm-6\">\n                <p> Marzo 2009 - Diciembre 2016</p>\n              </div>\n              <div className=\"col-sm-6\">\n                <p>Alumno ayudante Universidad de Concepción. Para referencias <a href=\"https://www2.udec.cl/~dipalma/\" target=\"_blank\" rel=\"noopener noreferrer\">mi viejo sitio</a></p>\n              </div>\n            </div>\n\n            <h2 className='mt-5'>Publicaciones</h2>\n            <h3 className='mt-5'>Revistas Científicas</h3>\n            <div className=\"row\">\n              <div className=\"col-sm-6\">\n                <p>\n                  <a href=\"https://ieeexplore.ieee.org/abstract/document/8506398\" target=\"_blank\" rel=\"noopener noreferrer\">\n                  Palma, D., & Atkinson, J. (2018). Coherence-based automatic essay assessment. IEEE Intelligent Systems, 33(5), 26-36.\n                  </a>\n                </p>\n              </div>\n            </div>\n            <div className=\"row\">\n              <div class=\"col-sm-6\">\n                <p>\n                  <a href=\"https://www.researchgate.net/profile/Antonio_Gutierrez_De_Blume/publication/340952008_Improving_Reading_Comprehension_in_Spanish_using_iSTART-E_A_Pilot_Study/links/5ea7117e299bf1125612f51b/Improving-Reading-Comprehension-in-Spanish-using-iSTART-E-A-Pilot-Study.pdf\" target=\"_blank\" rel=\"noopener noreferrer\">\n                  McCarthy, K. S., Soto, C., de Blume, A. P. G., Palma, D., González, J., & McNamara, D. Improving Reading Comprehension in Spanish using iSTART-E: A Pilot Study.\n                  </a>\n                </p>\n              </div>\n            </div>\n            <h3 className='mt-5'>Conferencias</h3>\n            <div className=\"row\">\n              <div className=\"col-sm-6\">\n                <p>\n                  <a href=\"https://link.springer.com/chapter/10.1007/978-3-030-25629-6_79\" target=\"_blank\" rel=\"noopener noreferrer\">\n                  Palma, D., Soto, C., Veliz, M., Riffo, B., & Gutiérrez, A. (2019, August). A Data-Driven Methodology to Assess Text Complexity Based on Syntactic and Semantic Measurements. In International Conference on Human Interaction and Emerging Technologies (pp. 509-515). Springer, Cham.\n                  </a>\n                </p>\n              </div>\n            </div>\n            <div className=\"row\">\n              <div className=\"col-sm-6\">\n                <p>\n                  <a href=\"https://www.spiedigitallibrary.org/conference-proceedings-of-spie/10810/1081005/Fracture-time-predictor-in-mask-data-preparation-using-machine-learning/10.1117/12.2502576.short?SSO=1\" target=\"_blank\" rel=\"noopener noreferrer\">\n                  Calderón, D., & Palma, D. (2018, October). Fracture time predictor in mask data preparation using machine learning. In Photomask Technology 2018 (Vol. 10810, p. 1081005). International Society for Optics and Photonics.\n                  </a>\n                </p>\n              </div>\n            </div>\n            <h3 className='mt-5'>Artículos y Opiniones en LinkedIn</h3>\n            <div className=\"row\">\n              <div className=\"col-sm-6\">\n                <p>\n                  <a href=\"https://www.linkedin.com/pulse/inteligencia-artificial-conceptos-b%25C3%25A1sicos-un-poco-de-y-palma-s%25C3%25A1nchez/?trackingId=ofL6W4PmSYSmRUR2zweCKg%3D%3D\" target=\"_blank\" rel=\"noopener noreferrer\">\n                    Inteligencia Artificial, Conceptos Básicos\n                  </a>\n                </p>\n              </div>\n            </div>\n            <div className=\"row\">\n              <div className=\"col-sm-6\">\n                <p>\n                  <a href=\"https://www.linkedin.com/pulse/construyendo-mi-propia-nube-cloud-y-montando-un-con-palma-s%25C3%25A1nchez/\" target=\"_blank\" rel=\"noopener noreferrer\">\n                    Construyendo una \"nube\" con Raspberry PIs\n                  </a>\n                </p>\n              </div>\n            </div>\n            <div className=\"row\">\n              <div className=\"col-sm-6\">\n                <p>\n                  <a href=\"https://www.linkedin.com/pulse/mi-primera-contribuci%25C3%25B3n-al-mundo-open-source-python-de-palma-s%25C3%25A1nchez/\" target=\"_blank\" rel=\"noopener noreferrer\">\n                    Contribución al opensource. Pyhton lib para complejidad de textos\n                  </a>\n                </p>\n              </div>\n            </div>\n            <div className=\"row\">\n              <div className=\"col-sm-6\">\n                <p>\n                  <a href=\"https://www.linkedin.com/pulse/complejidad-de-textos-dirigida-por-los-datos-para-ser-palma-s%25C3%25A1nchez/\" target=\"_blank\" rel=\"noopener noreferrer\">\n                    Complejidad de textos dirigida por datos\n                  </a>\n                </p>\n              </div>\n            </div>\n        </div>\n    )\n}\n\nexport default withLayout(About);","import React from \"react\";\nimport withLayout from \"../../components/withLayout\";\nimport Image from 'react-bootstrap/Image'\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\n\n\nfunction Setup() {\n  return (\n    <div className='container'>\n      <h1 className='mt-5'>Requerimientos para poder trabajar en los módulos</h1>\n      <p className='lead'>\n        En esta sección se definen los requerimientos para poder trabajar de forma óptima dentro del curso.\n                Por otro lado, se dan algunos tips para usuarios de distintos Sistemas Operativos: basados en <code>UNIX (Mac, Linux)</code> o <code>Windows</code>.\n                Si las imágenes se ven muy pequeñas, click derecho en la imágen y abrir en pestaña nueva para verla en tamaño completo.\n            </p>\n      <h2>Uso de terminal</h2>\n\n      <h3 id=\"windows\" className='mt-5'>Usuarios de Windows</h3>\n      <p>\n        Al momento de crear el contenido no conozco a los estudiantes del curso. Tengo el sesgo de asumir que la mayoría será usuario de windows.\n              En general, mi recomendación es que instalen <a href=\"https://www.anaconda.com/products/individual\" target=\"_blank\" rel=\"noopener noreferrer\">Anaconda</a> y\n              así se evitan varios dolores de cabeza. En simples razones, muchas dependencias de paquetes de <code>python</code> que utilizarán son\n              dependientes del Sistema Operativo y si no tienen experiencia compilando libs a windows, mejor bajar anaconda que viene con un entorno\n              resuelto. También recomiendo instalar Anaconda con <code>Python 3</code>, ya que la versión 2 fue deprecada este año (no tiene más soporte).\n\n              Teniendo anaconda instalado, yendo a inicio (o presionando tecla <code>win</code>), buscamos <code>Anaconda</code> y abrimos <code>Anaconda prompt</code> esto\n              abrirá una terminal:\n            </p>\n      <Row className=\"justify-content-md-center\">\n        <Col xs={12} sm={12} md={12}>\n          <Image src={process.env.PUBLIC_URL + '/imgs/windows1.png'} fluid />\n        </Col>\n      </Row>\n      <p>\n        La terminal estará ya con el entorno de <code>Anaconda</code> configurado y en general estarán en su directorio <code>home</code>, que sería:\n              <code>C:\\Users\\&lt;TU_USUARIO&gt;</code>, esto lo pueden ver de la terminal, o comprobarlo con el comando <code>cd</code> (Notar, si ud\n              es usuario de terminal en <code>UNIX</code>, el comando <code>cd</code> en una <code>shell</code> de Windows es diferente, hacer <code>cd</code> en\n              Windows sin argumentos, es equivalente a <code>pwd</code> en <code>UNIX</code>):\n            </p>\n      <Row className=\"justify-content-md-center\">\n        <Col xs={12} sm={12} md={12}>\n          <Image src={process.env.PUBLIC_URL + '/imgs/windows2.png'} fluid />\n        </Col>\n      </Row>\n\n      <p>\n        Como ejemplo creemos un directorio llamado <code>test</code> en terminal. Para ello, ejecutamos el comando <code>mkdir test</code>, luego\n              podemos verificar que el directorio fue creado, con el comando <code>dir</code>. Para ir al directorio, podemos hacer <code>cd test</code>:\n            </p>\n\n      <Row className=\"justify-content-md-center\">\n        <Col xs={12} sm={12} md={12}>\n          <Image src={process.env.PUBLIC_URL + '/imgs/windows3.png'} fluid />\n        </Col>\n      </Row>\n\n      <p>\n        Creemos un pequeño código <code>Python</code> y ejecutémoslo por terminal. Para ello hagamos <code>echo print('Hello world!') &gt; hello.py</code>, luego <code>python hello.py</code>,\n              deberiamos ver lo siguiente:\n            </p>\n      <Row className=\"justify-content-md-center\">\n        <Col xs={12} sm={12} md={12}>\n          <Image src={process.env.PUBLIC_URL + '/imgs/windows5.png'} fluid />\n        </Col>\n      </Row>\n\n      <p>Los directorios <code>.</code> y <code></code> son especiales. El primero es el directorio actual, mientras que <code>..</code> es\n            el directorio padre.</p>\n\n      <Row className=\"justify-content-md-center\">\n        <Col xs={12} sm={12} md={12}>\n          <Image src={process.env.PUBLIC_URL + '/imgs/windows4.png'} fluid />\n        </Col>\n      </Row>\n\n      <p>\n        Para efectos del curso, sólo será necesario aprender lo básico de utilizar una terminal. Por ejemplo, crear directorios,\n        cambiar directorio, listar directorios. Para más información respecto a comandos disponibles, pueden\n              <a href=\"https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/windows-commands\" target=\"_blank\" rel=\"noopener noreferrer\"> revisar la documentación</a>\n      </p>\n\n      <p>\n        Si queremos usar el entorno de conda en visual studio code, básicamente es <code>ctrl + shift + p</code>, buscar <code>python interpreter</code>\n              Y elegir el entorno de anaconda, como se muestra en la imágen abajo. Para abrir una terminal en visual studio code, pueden ir al menú\n              terminal y abrir una nueva, o hacer <code>ctrl + shift + ñ</code>.\n            </p>\n\n      <Row className=\"justify-content-md-center\">\n        <Col xs={12} sm={12} md={12}>\n          <Image src={process.env.PUBLIC_URL + '/imgs/windows6.png'} fluid />\n        </Col>\n      </Row>\n\n      <h3 id=\"unix\" className='mt-5'>Usuarios Linux y Mac</h3>\n      <p>\n        Yo en mi equipo personal utilizo Windows con <a href=\"https://docs.microsoft.com/en-us/windows/wsl/install-win10\" target=\"_blank\" rel=\"noopener noreferrer\">WSL</a>\n              (Windows Subsystem for Linux), es básicamente tener alguna distribución Linux en windows. De hecho, <code>VSCode</code> tiene una integración\n              con WSL y es bastante útil para propósitos de desarrollo. Con esto quiero decir, si alguien tiene <code>WSL</code>, los pasos son equivalentes\n              que en el caso de Linux.\n            </p>\n\n      <p>\n        Otro punto importante es tener un administrador de paquetes; este paso no es fundamental pero tenganlo en cuenta. En general las distribuciones de Linux vienen con administradores\n              de paquetes (por ejemplo en Linux basados en Debian tienen el comando <code>apt-get</code> para instalar librerías, etc, de distintos\n              repositorios.). En Mac, tengo entendido que las versiones más recientes del sistema operativo vienen ya con un administrador de paquetes,\n              en caso contrario, recomiendo instalar <a href=\"https://brew.sh/\" target=\"_blank\" rel=\"noopener noreferrer\">brew</a>. Finalmente, recomiendo\n              a usuarios de Mac, que instalen una terminal decente, la que viene por defecto no es muy buena. Yo he usado\n              <a href=\"https://www.iterm2.com/\" target=\"_blank\" rel=\"noopener noreferrer\">iTerm2</a> y lo he encontrado bastante bueno.\n            </p>\n\n      <p>Para abrir la terminal en <code>Mac</code>, pueden hacer la combinación <code>cmd + espacio</code> y escribe terminal. Abrir la terminal.\n            Deberían estar en el directorio <code>HOME</code> que un atajo en UNIX es <code>&tilde;</code>. Chequear que tenemos <code>python</code> en\n            el entorno y ver la versión: <code>python --version</code> si les sale versión 2, probar con <code>python3 --version</code>:\n            </p>\n      <Row className=\"justify-content-md-center\">\n        <Col xs={12} sm={12} md={12}>\n          <Image src={process.env.PUBLIC_URL + '/imgs/unix1.png'} fluid />\n        </Col>\n      </Row>\n\n      <p>En general las distribuciones de Mac y Linux vienen con python instalado. Creemos un directorio llamado test, vamos a dicho directorio,\n      creemos un pequeño script en python, listemos el directorio y ejecutemos el script por terminal:\n            </p>\n      <ol>\n        <li><code>mkdir test</code></li>\n        <li><code>cd test</code></li>\n        <li><code>echo 'print(\"Hello world!\")' &gt; hello.py</code></li>\n        <li><code>ls</code></li>\n        <li><code>python hello.py</code></li>\n      </ol>\n\n      <Row className=\"justify-content-md-center\">\n        <Col xs={12} sm={12} md={12}>\n          <Image src={process.env.PUBLIC_URL + '/imgs/unix2.png'} fluid />\n        </Col>\n      </Row>\n\n      <p>Para más información, revisar documentación, para ello buscar en internet <code>man pages</code>. Por ejemplo\n            el sitio de <a href=\"https://manpages.ubuntu.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Ubuntu</a>.</p>\n\n      <h2 className='mt-5' id=\"ides\">IDE recomendado (<em>Interactive Development Environment</em>)</h2>\n      <p>\n        No entraré en detalle, pero básicamente el editor de texto recomendado. Aquí no hay receta para todo, yo en lo personal\n              he probado <code>nano</code>, <code>emacs</code>, <code>VIM</code>, <code>sublime</code>, <code>Atom</code>, <code>Visual Studio Code (VSCode)</code>.\n              El que recomiendo definitivamente es <code>VSCode</code>. <code>Atom</code> es demasiado lento (o lo era cuando lo utilicé),\n              editores de texto bajo terminal como <code>nano</code>, <code>emacs</code> o <code>VIM</code> tienen una rampa de aprendizaje\n              un poco inclinada (no es para el usuario sin experiencia trabajando bajo terminal), yo en realidad los recomendaría en casos particulares\n              (e.g Trabajando en un clúster remoto, configurando inicialmente un server, se tiene RAM limitada, etc.) Sin embargo, siéntanse libres\n              de utilizar lo que más les acomode. La página oficial de <a href=\"https://code.visualstudio.com/\" target=\"_blank\" rel=\"noopener noreferrer\">VSCode</a>.\n            </p>\n    </div>\n  )\n}\n\nexport default withLayout(Setup);","import React from \"react\";\nimport withLayout from \"../../components/withLayout\";\nimport Image from 'react-bootstrap/Image'\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport SyntaxHighlighter from 'react-syntax-highlighter';\nimport { docco } from 'react-syntax-highlighter/dist/esm/styles/hljs';\n\n\nfunction PythonMisc() {\n  return (\n    <div className='container'>\n      <h1 className='mt-5'>¿Sobre qué es este apartado?</h1>\n      <p className='lead'>\n        En este apartado no defino nada en relación a características de Python, si no que a buenas prácticas en el\n        estilo de código. Hay muchas formas de escribir código en Python y en general en cualquier lenguaje de programación.\n        Sin embargo, en general es bueno seguir ciertas convenciones, de manera que todos los integrantes de un equipo sean\n        consistentes en el estilo de programar y el código sea homogéneo, lo que aumenta la \"mantenibilidad\" del código, y como\n        consecuencia, se tiene código de calidad, robusto, profesional y no una solución de juguete.\n            </p>\n      <h2>Ejemplo de código sin estándar ni buenas convenciones</h2>\n\n      <p>Para las demostraciones vamos a utilizar el siguiente bloque (<em>snippet</em>) de código:</p>\n      <SyntaxHighlighter language=\"python\" style={docco}>\n        {\n          \"from sys import *\\n\"\n          + \"def CalcularIMC(peso,estatura):\\n\"\n          + \"    return peso/(estatura**2)\\n\"\n          + \"\\n\"\n          + \"nombre=argv[1]\\n\"\n          + \"\\n\"\n          + \"print(\\\"Bienvenido {}\\\".format(nombre))\\n\"\n          + \"peso=float(input(\\\"Ingrese su peso: \\\"))\\n\"\n          + \"estatura=float(input(\\\"Ingrese su estatura: \\\"))\\n\"\n          + \"\\n\"\n          + \"print(\\\"Su IMC es: {}\\\".format(CalcularIMC(peso,estatura)))\\n\"\n        }\n      </SyntaxHighlighter>\n\n\n      <h3 id=\"windows\" className='mt-5'>¿Por qué el código es malo?</h3>\n      <p>El código funciona pero no tiene calidad alguna. Lo que se debe recordar en programación es lo siguiente:\n            <em>\"Que funcione no significa que esté correcto\"</em>. En particular, el fragmento de código anterior no sigue\n            el estándar <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.python.org/dev/peps/pep-0008/\">PEP8</a>. En mi\n            experiencia, utilizar este estándar me ha aliviado bastantes dolores de cabeza. Sin embargo, el estándar es gigante y leerlo\n            y tenerlo en cuenta cada vez que escribimos código es una tarea poco factible. Por ello, se han desarrollado herramientas\n            para ayudar a mejorar la calidad del código, en cuanto a estilo.</p>\n\n      <h4>Flake 8</h4>\n      <p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://flake8.pycqa.org/en/latest/\">Flake 8</a> está construido bajo\n            <code>PyFlakes</code>, <code>pycodestyle</code> y <code>Ned Batchelder’s McCabe script</code>, que son básicamente herramientas\n            que implementan chequeos de estilo de código, dado un código python. Para instalar <code>flake8</code> pueden hacerlo con el\n            siguiente comando <code>pip install flake8</code>. Consideremos que el código mencionado antes se llama <code>example.py</code>,\n            entonces, para chequear el estilo de código, podemos ejecutar <code>flake8 example.py</code>, obtendremos lo siguiente:</p>\n\n      <SyntaxHighlighter language=\"shell\" style={docco}>\n        {\n          \"> flake8 example.py\\n\"\n          + \"example.py:1:1: F403 'from sys import *' used; unable to detect undefined names\\n\"\n          + \"example.py:2:1: E302 expected 2 blank lines, found 0\\n\"\n          + \"example.py:2:21: E231 missing whitespace after ','\\n\"\n          + \"example.py:5:1: E305 expected 2 blank lines after class or function definition, found 1\\n\"\n          + \"example.py:5:7: E225 missing whitespace around operator\\n\"\n          + \"example.py:5:8: F405 'argv' may be undefined, or defined from star imports: sys\\n\"\n          + \"example.py:8:5: E225 missing whitespace around operator\\n\"\n          + \"example.py:9:9: E225 missing whitespace around operator\\n\"\n          + \"example.py:11:46: E231 missing whitespace after ','\\n\"\n          + \"example.py:11:58: W292 no newline at end of file\"\n        }\n      </SyntaxHighlighter>\n\n      <p>Lo que nos está diciendo <code>flake8</code> es que el código tiene muchos errores que no cumplen los estándares, además\n            hace referencia al estándar (ejemplo: F403, E302, etc.) y nos dice las líneas que están en conflicto como guía para corregirlo.</p>\n\n      <h4>Black Python Formatter</h4>\n\n      <p>Otra debilidad que tiene el código anterior es cómo está formateado. No respeta tampoco estándares en cuanto a saltos\n      de línea, espacios, etc. Un paquete muy utilizado (profesionalmente y en proyectos de código abierto)\n      es <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/psf/black\">black</a>. Para instalar black, simplemente\n            ejecutar <code>pip install black</code>. Por ejemplo, pueden usarlo para re-formatear el código\n            anterior: <code>black example.py</code></p>\n\n      <SyntaxHighlighter language=\"shell\" style={docco}>\n        {\n          \">black example.py\\n\"\n          + \"reformatted example.py\\n\"\n          + \"All done! ✨ �🍰✨✨\\n\"\n          + \"1 file reformatted.\"\n        }\n      </SyntaxHighlighter>\n\n      <p>El código será reformateado y quedará así:</p>\n      <SyntaxHighlighter language=\"python\" style={docco}>\n        {\n          \"from sys import *\\n\"\n          + \"\\n\"\n          + \"\\n\"\n          + \"def CalcularIMC(peso, estatura):\\n\"\n          + \"    return peso / (estatura ** 2)\\n\"\n          + \"\\n\"\n          + \"\\n\"\n          + \"nombre = argv[1]\\n\"\n          + \"\\n\"\n          + \"print(\\\"Bienvenido {}\\\".format(nombre))\\n\"\n          + \"peso = float(input(\\\"Ingrese su peso: \\\"))\\n\"\n          + \"estatura = float(input(\\\"Ingrese su estatura: \\\"))\\n\"\n          + \"\\n\"\n          + \"print(\\\"Su IMC es: {}\\\".format(CalcularIMC(peso, estatura)))\"\n        }\n      </SyntaxHighlighter>\n\n      <p>Se observa que ahora existe un espacio entre operadores (asignación, operaciones matemáticas), lo que\n            sigue las convenciones a la hora de escribir código con python. Queda mucho más legible que la versión anterior.</p>\n\n      <h4>Pydocstyle</h4>\n\n      <p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://pypi.org/project/pydocstyle/\">Pydocstyle</a> es una herramienta para chequear el estilo de\n            los <code>docstrings</code> (documentación) de las funciones y clases. Para instalar\n            ejecutar <code>pip install pydocstyle</code>, abajo se muestra el resultado de correr <code>pydocstyle</code> en el código\n            de ejemplo:</p>\n\n      <SyntaxHighlighter language=\"shell\" style={docco}>\n        {\n          \">pydocstyle example.py\\n\"\n          + \"example.py:1 at module level:\\n\"\n          + \"        D100: Missing docstring in public module\\n\"\n          + \"example.py:4 in public function `CalcularIMC`:\\n\"\n          + \"        D103: Missing docstring in public function\"\n        }\n      </SyntaxHighlighter>\n\n      <p>Lo que nos está diciendo <code>pydocstyle</code> es que faltan los <code>docstrings</code> del módulo y\n            de la función definida.</p>\n\n      <h3>Integrando los chequeos con Visual Studio Code</h3>\n      <p>Como podrán notar, es un poco tedioso correr los chequeos cada vez que se modifica el código, por ello\n            usamos un IDE, para agilizar el trabajo. <code>VSCode</code> cuenta con integraciones y plugins para incoporar\n            el uso de estas herramientas automáticamente.</p>\n\n      <p>Para configurar <code>VSCode</code> con <code>flake8</code>, en Windows/Linux hacen <code>ctrl + shift + P</code> (en MAC\n            sería <code>cmd + shift + P</code>), escogen select linter, y eligen flake8. En caso de que algo no funcione, las instrucciones\n            completas en <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://code.visualstudio.com/docs/python/linting\">este enlace</a>. Si\n            hicieron todo correctamente, ahora los mensajes de <code>flake8</code> deberían poder verlos desde el editor:</p>\n\n\n      <Row className=\"justify-content-md-center\">\n        <Col xs={12} sm={12} md={12}>\n          <Image src={process.env.PUBLIC_URL + '/imgs/linter.png'} fluid />\n        </Col>\n      </Row>\n\n      <p>Para agregar <code>black</code> a <code>VSCode</code> code, pueden seguir\n      <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://medium.com/@marcobelo/setting-up-python-black-on-visual-studio-code-5318eba4cd00\">estas instrucciones</a></p>\n\n      <p>Para documentar funciones en <code>python</code> existen varios formatos. Yo personalmente he utilizado\n      <code>restructuredText</code> y encuentro que queda bastante bien. Por ejemplo pueden mirar\n      el <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.python.org/dev/peps/pep-0287/\">PEP 287</a>. Para configurar\n      <code>restructuredText</code> en <code>VSCode</code>, pueden instalar el\n      plugin <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://marketplace.visualstudio.com/items?itemName=njpwerner.autodocstring\">Python Docstring Generator</a> y\n      configurarlo eligiendo formato <code>sphinx</code>.</p>\n\n      <Row className=\"justify-content-md-center\">\n        <Col xs={12} sm={12} md={12}>\n          <Image src={process.env.PUBLIC_URL + '/imgs/docstring.png'} fluid />\n        </Col>\n      </Row>\n\n      <Row className=\"justify-content-md-center\">\n        <Col xs={12} sm={12} md={12}>\n          <Image src={process.env.PUBLIC_URL + '/imgs/docstring2.png'} fluid />\n        </Col>\n      </Row>\n\n      <p>Finalmente se les generará automáticamente el docstring cuando escriban <code>\"\"\" + enter</code> bajo la función. El código finalmente\n      quedará así:</p>\n\n      <SyntaxHighlighter language=\"python\" style={docco}>\n        {\n          \"\\\"\\\"\\\"Ejemplo para la el curso.\\\"\\\"\\\"\\n\"\n          + \"\\n\"\n          + \"from sys import argv\\n\"\n          + \"\\n\"\n          + \"\\n\"\n          + \"def calcular_imc(peso, estatura):\\n\"\n          + \"    \\\"\\\"\\\"Compute IMC.\\n\"\n          + \"\\n\"\n          + \"    :param peso: Peso de la persona\\n\"\n          + \"    :type peso: float\\n\"\n          + \"    :param estatura: estatura de la persona\\n\"\n          + \"    :type estatura: float\\n\"\n          + \"    :return: IMC de la persona\\n\"\n          + \"    :rtype: float\\n\"\n          + \"    \\\"\\\"\\\"\\n\"\n          + \"    return peso / (estatura ** 2)\\n\"\n          + \"\\n\"\n          + \"\\n\"\n          + \"nombre = argv[1]\\n\"\n          + \"\\n\"\n          + \"print(\\\"Bienvenido {}\\\".format(nombre))\\n\"\n          + \"peso = float(input(\\\"Ingrese su peso: \\\"))\\n\"\n          + \"estatura = float(input(\\\"Ingrese su estatura: \\\"))\\n\"\n          + \"\\n\"\n          + \"print(\\\"Su IMC es: {}\\\".format(calcular_imc(peso, estatura)))\\n\"\n        }\n      </SyntaxHighlighter>\n\n      <ul>\n        <li>Cambié el nombre de la función por minúsculas, porque es una función. Por convención, en general sólo las clases\n        se escriben con mayúsculas (en general).</li>\n        <li>Se agregó docstring con formato <code>sphinx</code> a la función <code>calcular_imc</code></li>\n        <li>Se corrigieron los errores que arrojaba <code>flake8</code> y se reformateó el código con <code>black</code> para hacerlo más legible.</li>\n      </ul>\n    </div>\n  )\n}\n\nexport default withLayout(PythonMisc);","import React from \"react\";\nimport { useState } from 'react';\nimport withLayout from \"../../components/withLayout\";\nimport MathJax from 'react-mathjax-preview';\nimport SyntaxHighlighter from 'react-syntax-highlighter';\nimport Button from 'react-bootstrap/Button';\nimport { docco } from 'react-syntax-highlighter/dist/esm/styles/hljs';\nimport { Link } from \"react-router-dom\";\n\n\nfunction WeekOne() {\n\n  const [showSol1, setLoadingSol1] = useState(false);\n\n\n  const handleClickSol1 = () => setLoadingSol1(!showSol1);\n\n  return (\n    <div className='container'>\n      <h1 className='mt-5'>Semana 1</h1>\n      <p className='lead'>\n        Para aprovechar el tiempo de sobra de la semana 1, se dejan ejercicios para que puedan practicar lo\n        aprendido en las sesiones no presenciales (fuera de clases). Por otro lado, también dejaré una explicación de conceptos\n        básicos, para que logren aclarar su entendimiento respecto a programación en general.\n            </p>\n\n      <h2>¿Qué es un programa?</h2>\n      <p>Definir qué es un <b>programa</b> se puede hacer de múltiples formas dependiendo del grado de detalle que uno quiera considerar.\n      Sin embargo, la intuición que debe entenderse por program es: <em>Un programa es un conjunto de instrucciones de máquina para llevar a cabo una\n      tarea definida.</em>. Probablemente, en su uso cotidiano de computadores, han utilizado diversos programas (ej. Microsoft Word, Google Chrome, etc.).\n      Sin embargo, todos estos programas tienen una <em>interfaz de usuario</em> lo que nos aleja un poco de lo que veremos a lo largo del curso. Para\n      tener una intuición más acercada a los programas que desarrollaremos en el curso, tomemos como ejemplo el programa <code>ping</code>. El\n      programa <code>ping</code> en términos simples envía secuencias de bytes a un sitio definido y mide el tiempo de promedio de respuesta del sitio.\n      En <code>Windows</code> por ejemplo pueden hacer, en la terminal pueden hacer:</p>\n\n      <SyntaxHighlighter language=\"shell\" style={docco}>\n        {\n          \">ping www.google.com\\n\"\n          + \"\\n\"\n          + \"Haciendo ping a www.google.com [172.217.192.105] con 32 bytes de datos:\\n\"\n          + \"Respuesta desde 172.217.192.105: bytes=32 tiempo=41ms TTL=107\\n\"\n          + \"Respuesta desde 172.217.192.105: bytes=32 tiempo=18ms TTL=107\\n\"\n          + \"Respuesta desde 172.217.192.105: bytes=32 tiempo=35ms TTL=107\\n\"\n          + \"Respuesta desde 172.217.192.105: bytes=32 tiempo=21ms TTL=107\\n\"\n          + \"\\n\"\n          + \"Estadísticas de ping para 172.217.192.105:\\n\"\n          + \"    Paquetes: enviados = 4, recibidos = 4, perdidos = 0\\n\"\n          + \"    (0% perdidos),\\n\"\n          + \"Tiempos aproximados de ida y vuelta en milisegundos:\\n\"\n          + \"    Mínimo = 18ms, Máximo = 41ms, Media = 28ms\"\n        }\n      </SyntaxHighlighter>\n\n      En <code>UNIX (MacOS, Linux)</code> también existe el programa <code>ping</code>, pero este se ejecuta indefinidamente hasta que\n      el usuario lo interrumpa (con <code>Ctrl + C</code>):\n\n      <SyntaxHighlighter language=\"shell\" style={docco}>\n        {\n          \"ping www.google.com\\n\"\n          + \"PING www.google.com (64.233.190.103) 56(84) bytes of data.\\n\"\n          + \"64 bytes from gsademo22.google.com (64.233.190.103): icmp_seq=1 ttl=107 time=39.8 ms\\n\"\n          + \"64 bytes from gsademo22.google.com (64.233.190.103): icmp_seq=2 ttl=107 time=17.6 ms\\n\"\n          + \"64 bytes from gsademo22.google.com (64.233.190.103): icmp_seq=3 ttl=107 time=28.0 ms\\n\"\n          + \"64 bytes from gsademo22.google.com (64.233.190.103): icmp_seq=4 ttl=107 time=31.0 ms\\n\"\n          + \"^C\\n\"\n          + \"--- www.google.com ping statistics ---\\n\"\n          + \"4 packets transmitted, 4 received, 0% packet loss, time 3002ms\\n\"\n          + \"rtt min/avg/max/mdev = 17.614/29.132/39.880/7.957 ms\"\n        }\n      </SyntaxHighlighter>\n\n      <p>Como podrán imaginarse, los programas en general tienen múltiples funcionalidades, incluso los programas más simples. Supongamos\n      que el promedio de 4 paquetes enviados por ping no me da un número representativo para la latencia en milisegundos que observo al usar\n      internet. La pregunta es ¿viene el programa <code>ping</code> dotado de la capacidad de controlar la cantidad de bytes enviados\n      para calcular la latencia en milisegundos? Aquí es donde entran los <b>argumentos de línea de comandos</b>, que son básicamente\n      \"palancas\" que nos permiten modificar o ajustar el comportamiento de nuestro programa. Volvamos a correr el programa pero considerando el\n      envío de 10 paquetes de bytes. En <code>Windows</code>:</p>\n\n      <SyntaxHighlighter language=\"shell\" style={docco}>\n        {\n          \">ping /n 10 www.google.com\\n\"\n          + \"\\n\"\n          + \"Haciendo ping a www.google.com [64.233.190.104] con 32 bytes de datos:\\n\"\n          + \"Respuesta desde 64.233.190.104: bytes=32 tiempo=130ms TTL=107\\n\"\n          + \"Respuesta desde 64.233.190.104: bytes=32 tiempo=39ms TTL=107\\n\"\n          + \"Respuesta desde 64.233.190.104: bytes=32 tiempo=198ms TTL=107\\n\"\n          + \"Respuesta desde 64.233.190.104: bytes=32 tiempo=21ms TTL=107\\n\"\n          + \"Respuesta desde 64.233.190.104: bytes=32 tiempo=30ms TTL=107\\n\"\n          + \"Respuesta desde 64.233.190.104: bytes=32 tiempo=16ms TTL=107\\n\"\n          + \"Respuesta desde 64.233.190.104: bytes=32 tiempo=31ms TTL=107\\n\"\n          + \"Respuesta desde 64.233.190.104: bytes=32 tiempo=13ms TTL=107\\n\"\n          + \"Respuesta desde 64.233.190.104: bytes=32 tiempo=68ms TTL=107\\n\"\n          + \"Respuesta desde 64.233.190.104: bytes=32 tiempo=15ms TTL=107\\n\"\n          + \"\\n\"\n          + \"Estadísticas de ping para 64.233.190.104:\\n\"\n          + \"    Paquetes: enviados = 10, recibidos = 10, perdidos = 0\\n\"\n          + \"    (0% perdidos),\\n\"\n          + \"Tiempos aproximados de ida y vuelta en milisegundos:\\n\"\n          + \"    Mínimo = 13ms, Máximo = 198ms, Media = 56ms\"\n        }\n      </SyntaxHighlighter>\n\n      En <code>UNIX (MacOS, Linux):</code>\n\n      <SyntaxHighlighter language=\"shell\" style={docco}>\n        {\n          \"> ping -c 10 www.google.com\\n\"\n          + \"PING www.google.com (64.233.190.105) 56(84) bytes of data.\\n\"\n          + \"64 bytes from gsademo24.google.com (64.233.190.105): icmp_seq=1 ttl=107 time=33.5 ms\\n\"\n          + \"64 bytes from gsademo24.google.com (64.233.190.105): icmp_seq=2 ttl=107 time=19.3 ms\\n\"\n          + \"64 bytes from gsademo24.google.com (64.233.190.105): icmp_seq=3 ttl=107 time=273 ms\\n\"\n          + \"64 bytes from gsademo24.google.com (64.233.190.105): icmp_seq=4 ttl=107 time=83.4 ms\\n\"\n          + \"64 bytes from gsademo24.google.com (64.233.190.105): icmp_seq=5 ttl=107 time=34.9 ms\\n\"\n          + \"64 bytes from gsademo24.google.com (64.233.190.105): icmp_seq=6 ttl=107 time=23.6 ms\\n\"\n          + \"64 bytes from gsademo24.google.com (64.233.190.105): icmp_seq=7 ttl=107 time=31.2 ms\\n\"\n          + \"64 bytes from gsademo24.google.com (64.233.190.105): icmp_seq=8 ttl=107 time=99.6 ms\\n\"\n          + \"64 bytes from gsademo24.google.com (64.233.190.105): icmp_seq=9 ttl=107 time=19.8 ms\\n\"\n          + \"64 bytes from gsademo24.google.com (64.233.190.105): icmp_seq=10 ttl=107 time=39.8 ms\\n\"\n          + \"\\n\"\n          + \"--- www.google.com ping statistics ---\\n\"\n          + \"10 packets transmitted, 10 received, 0% packet loss, time 9008ms\\n\"\n          + \"rtt min/avg/max/mdev = 19.301/65.915/273.775/73.904 ms\"\n        }\n      </SyntaxHighlighter>\n\n      <p>Cambiamos el comportamiento del programa, diciéndole que en lugar de enviar paquetes de bytes con las opciones por defecto\n      enviara <code>10</code> paquetes de bytes. Notar también que el sitio al que queremos hacer <code>ping</code> también es un\n      argumento para el programa, y en los ejemplos usamos <code>www.google.com</code>. <b>¿Podremos hacer algo similar en <code>Python</code>?</b> Aquí\n      es done entra el módulo <code>sys</code> y en particular <code>argv</code>. Consideremos el siguiente programa de ejemplo\n      llamado <code>ejemplo_argv.py</code>:</p>\n\n      <SyntaxHighlighter language=\"python\" style={docco}>\n        {\n          \"import sys\\n\"\n          + \"\\n\"\n          + \"\\n\"\n          + \"print(sys.argv)\\n\"\n\n        }\n      </SyntaxHighlighter>\n\n      <p>Utilizando python para ejecutar el programa, por ejemplo <code>python ejemplo_argv.py</code>, va a mostrar en la termina el siguiente\n      texto: <code>['ejemplo_argv.py']</code>. Prueben correr el programa con distintos argumentos, por\n      ejemplo: <code>python ejemplo_argv.py hola esto es un ejemplo de argumentos al programa</code>, esto mostrará en la terminal lo siguiente:\n      <code>['ejemplo_argv.py', 'hola', 'esto', 'es', 'un', 'ejemplo', 'de', 'argumentos', 'al', 'programa']</code>. Básicamente <code>argv</code> es\n      una <em>lista de cadenas de texto</em> (<code>string</code>), <b>donde el primer elemento es el nombre del archivo que contiene el código</b> (programa).\n      Esto lo <b>deberán entender mejor cuando vean sus sesiones online</b> de la semana de\n      Introducción a Python. ¿Cómo utilizar los argumentos? Para acceder a los elementos de la lista, se utiliza lo que se conoce como indexación.\n      En <code>python</code> en particular, los índices comienzan del 0. Por lo que, si quisieran acceder al primer elemento de dicha lista, se hace\n      mediante <code>sys.argv[0]</code>. La sintaxis <code>lista[i]</code> es acceder al elemento <code>i</code>-ésimo de la <code>lista</code>. Finalmente\n      se deja un ejemplo de programa que saluda al usuario dado un nombre:</p>.\n\n      <SyntaxHighlighter language=\"python\" style={docco}>\n        {\n          \"import sys\\n\"\n          + \"\\n\"\n          + \"\\n\"\n          + \"nombre = sys.argv[1]\\n\"\n          + \"print(f\\\"Hola {nombre}!\\\")\\n\"\n\n        }\n      </SyntaxHighlighter>\n\n      <p>Si nombramos el archivo como <code>ejemplo_argv.py</code> y lo ejecutamos vía <code>python ejemplo_argv.py Diego</code>, el programa mostará\n      lo siguiente: <code>Hola Diego!</code>.</p>\n\n      <h2>Ejercicios</h2>\n      <h3>Ejercicio 1</h3>\n\n      <p>Escriba un programa que lea un entero positivo <code>n</code>, ingresado por usuario y e imprima la suma de\n      los números desde <code>1</code> a <code>n</code>. Para calcular la sumatoria <code>1 + 2 + 3 + ... n</code> puede\n      utilizar la siguiente fórmula:</p>\n\n      <MathJax math={`$$Suma = \\\\frac{n\\\\left(n + 1\\\\right)}{2}$$`} />\n\n      <p>Escriba dos versiones del programa, una que lea la entrada con la función <code>input</code> y otra que sea por <code>argv</code>.</p>\n\n      <h3>Ejercicio 2</h3>\n      <p>Mucha gente en otros países mide su estatura utilizando pies y pulgadas, en Chile utilizamos los metros como unidad. Escriba un programa\n      que lea una medición en pies y número de pulgadas, ambos entregados por el usuario. El programa debe transformar la medición a\n      centímetros. <b>Pista:</b> Un pie son 12 pulgadas. Una pulgada son 2.54 cm.</p>\n\n      <h3>Ejercicio 3</h3>\n      <p>Escriba un programa que reciba como entradas <code>3</code> enteros. El programa debe imprimir en pantalla los 3 enteros ordenados\n      en forma creciente. <b>Pista</b>: Puede encontrar el mínimo valor usando la función <code>min</code> y el máximo usando <code>max</code>. ¿Cómo\n      podría encontrar el valor faltante?</p>\n\n      <h2>Soluciones</h2>\n      <>\n        <Button variant=\"primary\" onClick={handleClickSol1}>\n          {(showSol1) ? \"Ocultar solución Ejercicio 1\" : \"Mostrar Solución Ejercicio 1\"}\n        </Button>\n        {\n          showSol1 &&\n          <div>\n            <p>Si usamos <code>input</code>, se debe recordar que <code>Python</code> guardará la entrada por teclado como variable de\n            tipo <code>string</code> (cadena de texto). Por lo tanto, se deberá transformar a <code>int</code>. Por ahora, asumiremos que\n            el usuario ingresará un número entero. Luego, se puede caclular la suma, utilizando la fórmula y usamos la función <code>print</code> para\n            mostrar el resultado.</p>\n\n            <p>Si su código se ve como sigue: </p>\n            <SyntaxHighlighter language=\"python\" style={docco}>\n              {\n                \"n=int(input(\\\"Ingrese valor de n: \\\"))\\n\"\n                + \"suma=n*(n+1)/2\\n\"\n                + \"print(f\\\"El valor para n = {n} es {suma}\\\")\"\n              }\n            </SyntaxHighlighter>\n\n            <p>Ruego encarecidamente que vean \"<Link to=\"python_misc\">Escribir buen código en python</Link>\". Idealmente quieren correr el\n            formateador de código <code>black</code> y el chequeador de estándar <code>PEP8</code> <code>flake8</code>. Finalmente, el código\n            se vería como sigue:</p>\n\n            <SyntaxHighlighter language=\"python\" style={docco}>\n              {\n                \"n = int(input(\\\"Ingrese valor de n: \\\"))\\n\"\n                + \"suma = n * (n + 1) / 2\\n\"\n                + \"print(f\\\"El valor para n = {n} es {suma}\\\")\"\n\n              }\n            </SyntaxHighlighter>\n\n            <p>De esta forma, el código será más legible para mí, para ustedes, e irá acorde con estándares de código.</p>\n          </div>\n        }\n      </>\n    </div>\n  )\n}\n\nexport default withLayout(WeekOne);","import React from \"react\";\nimport withLayout from \"../../components/withLayout\";\nimport SyntaxHighlighter from 'react-syntax-highlighter';\nimport { docco } from 'react-syntax-highlighter/dist/esm/styles/hljs';\nimport Image from 'react-bootstrap/Image'\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\n\n\nfunction WeekTwo() {\n\n  return (\n    <div className='container'>\n      <h1 className='mt-5'>Ciclos y Métodos: Ejercicios complementarios</h1>\n      <p className='lead'>\n        La semana 2 es de métodos y ciclos, se dejan ejercicios para repasar estas temáticas. Se mostrará un ejemplo de uso de funciones\n        y ciclos, y técnicas generales para resolver problemas.</p>\n\n      <h2>Ejemplo del Lector de mentes</h2>\n\n      <p>En este ejemplo se implementará un lector de mentes. El usuario pensará un número del 1 al 100, y el computador intentará adivinar\n      el número. El usuario le proporcionará al computador información sobre si el número adivinado es mayor o menor que el número que\n      está pensando, en caso de que el computador haya errado en adivinar. El juego terminará una vez el computador adivine el número del\n      usuario.</p>\n\n      <p>Lo primero es pensar el problema y resolverlo mediante abstracción (sin programar). Al entender el problema, se podría pensar\n      que sigue el siguiente flujo:</p>\n\n      <Row className=\"justify-content-md-center\">\n        <Col xs={12} sm={4} md={4}>\n          <Image src={process.env.PUBLIC_URL + '/imgs/flujo1.png'} fluid />\n        </Col>\n      </Row>\n\n      <p>Lo mostrado en la figura anterior es un esqueleto del flujo que sigue el programa, donde muchos componentes fueron\n      abstraídos. Saludar al usuario por ejemplo, es una abstracción y se puede implementar con una función, por ejemplo:</p>\n\n\n      <SyntaxHighlighter language=\"python\" style={docco}>\n        {\n          \"def saludar():\\n\"\n          + \"    print(\\\"Bienvenido al lector de mente.\\\")\\n\"\n          + \"    print(\\\"Por favor piense en un número del 1 al 100\\\")\\n\"\n        }\n      </SyntaxHighlighter>\n\n      <p>Se puede ver también que el juego no terminará hasta que la computadora no adivine el número. Sin embargo, ¿cómo se podría implementar\n      esa lógica? Se debe entrar al detalle de la abstracción, descomponiendo el problema en un sub-problema:</p>\n\n      <Row className=\"justify-content-md-center\">\n        <Col xs={12} sm={8} md={8}>\n          <Image src={process.env.PUBLIC_URL + '/imgs/flujo2.png'} fluid />\n        </Col>\n      </Row>\n\n      <p>El problema de adivinar, se puede implementar de la siguiente forma:</p>\n      <ol>\n        <li>Inicialmente, el computador sabe que el usuario está pensando un número entre <code>1</code> y <code>100</code>.</li>\n        <li>Por lo tanto, lo natural, sería adivinar un número entre medio (entero) <code>(1 + 100)/2 = 50.5</code>, por lo tanto <code>50</code></li>\n        <li>Si el usuario dice que el número es mayor, entonces sabemos que no está entre <code>1</code> y <code>50</code> y podemos\n        inferir que el número estará entre <code>50</code> y <code>100</code>. Con estos límites volvemos al paso 1.</li>\n        <li>En caso de que el computador adivine terminamos el juego.</li>\n      </ol>\n\n      <p>Por otro lado, mostrar menú también es una abstracción, y se podría implementar en una función <code>mostrar_menu</code>:</p>\n\n      <SyntaxHighlighter language=\"python\" style={docco}>\n        {\n          \"def mostrar_menu(num):\\n\"\n          + \"    print(f\\\"Adivino que el número que está pensando es: {num}\\\")\\n\"\n          + \"    print(\\\"Elija una opción\\\")\\n\"\n          + \"    print(\\\"1. El número que estoy pensando es mayor\\\")\\n\"\n          + \"    print(\\\"2. El número que estoy pensando es menor\\\")\\n\"\n          + \"    print(\\\"3. ¡Ese es mi número! Bravo!!!\\\")\\n\"\n        }\n      </SyntaxHighlighter>\n\n      <p>Finalmente, podemos ir más al detalle, y definir un flujo para <b>leer opción</b>:</p>\n\n      <Row className=\"justify-content-md-center\">\n        <Col xs={12} sm={8} md={8}>\n          <Image src={process.env.PUBLIC_URL + '/imgs/flujo3.png'} fluid />\n        </Col>\n      </Row>\n\n      <p>Del diagrama de flujo, esto puede implementarse como:</p>\n\n      <SyntaxHighlighter language=\"python\" style={docco}>\n        {\n          \"def leer_opcion():\\n\"\n          + \"  escogiendo = True\\n\"\n          + \"\\n\"\n          + \"  while escogiendo:\\n\"\n          + \"      opcion = input(\\\"Ingrese su opción: \\\")\\n\"\n          + \"      if opcion != \\\"1\\\" and opcion != \\\"2\\\" and opcion != \\\"3\\\":\\n\"\n          + \"          print(\\\"Opcion inválida.\\\")\\n\"\n          + \"      else:\\n\"\n          + \"          escogiendo = False\\n\"\n          + \"\\n\"\n          + \"  return int(opcion)\\n\"\n        }\n      </SyntaxHighlighter>\n\n      <p>Luego, es cosa de juntar todos los subproblemas que resolvimos, para resolver el problema principal. Lo que\n      resultaría en:</p>\n\n      <SyntaxHighlighter language=\"python\" style={docco}>\n        {\n          \"def saludar():\\n\"\n          + \"    print(\\\"Bienvenido al lector de mente.\\\")\\n\"\n          + \"    print(\\\"Por favor piense en un número del 1 al 100\\\")\\n\"\n          + \"\\n\"\n          + \"\\n\"\n          + \"def adivinar(inferior, superior):\\n\"\n          + \"    return (inferior + superior) // 2\\n\"\n          + \"\\n\"\n          + \"\\n\"\n          + \"def mostrar_menu(num):\\n\"\n          + \"    print(f\\\"Adivino que el número que está pensando es: {num}\\\")\\n\"\n          + \"    print(\\\"Elija una opción\\\")\\n\"\n          + \"    print(\\\"1. El número que estoy pensando es mayor\\\")\\n\"\n          + \"    print(\\\"2. El número que estoy pensando es menor\\\")\\n\"\n          + \"    print(\\\"3. ¡Ese es mi número! Bravo!!!\\\")\\n\"\n          + \"\\n\"\n          + \"\\n\"\n          + \"def leer_opcion():\\n\"\n          + \"    escogiendo = True\\n\"\n          + \"\\n\"\n          + \"    while escogiendo:\\n\"\n          + \"        opcion = input(\\\"Ingrese su opción: \\\")\\n\"\n          + \"        if opcion != \\\"1\\\" and opcion != \\\"2\\\" and opcion != \\\"3\\\":\\n\"\n          + \"            print(\\\"Opcion inválida.\\\")\\n\"\n          + \"        else:\\n\"\n          + \"            escogiendo = False\\n\"\n          + \"\\n\"\n          + \"    return int(opcion)\\n\"\n          + \"\\n\"\n          + \"\\n\"\n          + \"saludar()\\n\"\n          + \"\\n\"\n          + \"juego_continua = True\\n\"\n          + \"inf = 1\\n\"\n          + \"sup = 100\\n\"\n          + \"intentos = 0\\n\"\n          + \"while juego_continua:\\n\"\n          + \"    num = adivinar(inf, sup)\\n\"\n          + \"    intentos += 1\\n\"\n          + \"    mostrar_menu(num)\\n\"\n          + \"    opcion = leer_opcion()\\n\"\n          + \"    if opcion == 1:\\n\"\n          + \"        inf = num\\n\"\n          + \"    elif opcion == 2:\\n\"\n          + \"        sup = num\\n\"\n          + \"    else:\\n\"\n          + \"        juego_continua = False\\n\"\n          + \"\\n\"\n          + \"print(f\\\"El adivinador adivinó su número {num} en {intentos} intentos\\\")\\n\"\n        }\n      </SyntaxHighlighter>\n\n      <SyntaxHighlighter language=\"shell\" style={docco}>\n        {\n          \">python adivina.py\\n\"\n          + \"Bienvenido al lector de mente.\\n\"\n          + \"Por favor piense en un número del 1 al 100    \\n\"\n          + \"Adivino que el número que está pensando es: 50\\n\"\n          + \"Elija una opción\\n\"\n          + \"1. El número que estoy pensando es mayor      \\n\"\n          + \"2. El número que estoy pensando es menor      \\n\"\n          + \"3. ¡Ese es mi número! Bravo!!!\\n\"\n          + \"Ingrese su opción: 1\\n\"\n          + \"Adivino que el número que está pensando es: 75\\n\"\n          + \"Elija una opción\\n\"\n          + \"1. El número que estoy pensando es mayor      \\n\"\n          + \"2. El número que estoy pensando es menor      \\n\"\n          + \"3. ¡Ese es mi número! Bravo!!!\\n\"\n          + \"Ingrese su opción: 1\\n\"\n          + \"Adivino que el número que está pensando es: 87\\n\"\n          + \"Elija una opción\\n\"\n          + \"1. El número que estoy pensando es mayor\\n\"\n          + \"2. El número que estoy pensando es menor\\n\"\n          + \"3. ¡Ese es mi número! Bravo!!!\\n\"\n          + \"Ingrese su opción: 2\\n\"\n          + \"Adivino que el número que está pensando es: 81\\n\"\n          + \"Elija una opción\\n\"\n          + \"1. El número que estoy pensando es mayor\\n\"\n          + \"2. El número que estoy pensando es menor\\n\"\n          + \"3. ¡Ese es mi número! Bravo!!!\\n\"\n          + \"Ingrese su opción: 2\\n\"\n          + \"Adivino que el número que está pensando es: 78\\n\"\n          + \"Elija una opción\\n\"\n          + \"1. El número que estoy pensando es mayor\\n\"\n          + \"2. El número que estoy pensando es menor\\n\"\n          + \"3. ¡Ese es mi número! Bravo!!!\\n\"\n          + \"Ingrese su opción: 1\\n\"\n          + \"Adivino que el número que está pensando es: 79\\n\"\n          + \"Elija una opción\\n\"\n          + \"1. El número que estoy pensando es mayor\\n\"\n          + \"2. El número que estoy pensando es menor\\n\"\n          + \"3. ¡Ese es mi número! Bravo!!!\\n\"\n          + \"Ingrese su opción: 3\\n\"\n          + \"El adivinador adivinó su número 79 en 6 intentos\\n\"\n        }\n      </SyntaxHighlighter>\n\n\n      <h2>Ejercicios</h2>\n      <h3>Ejercicio 1</h3>\n\n      <p>Escriba un programa que calcule el perímetro de un polígono. Comience leyendo los valores de las coordenadas <code>x</code> e <code>y</code> del\n      primer punto en el perímetro del polígono. Luego, continúe leyendo pares <code>x</code> e <code>y</code> hasta que el usuario ingrese una\n      línea vacía para la coordenada <code>x</code>. Cada vez que se lea una coordenada, se debe calcular la distancia al punto previo y\n      acumularla en el perímetro. Cuando el usuario ingresa una línea vacía, tu programa deberá sumar la distancia entre el último punto\n      y el primer punto del perímetro. Luego, debería mostrar el perímetro total. Un ejemplo de entrada y salida se muestra abajo:</p>\n\n      <SyntaxHighlighter language=\"shell\" style={docco}>\n        {\n          \"Ingrese la coordenada x: 0\\n\"\n          + \"Ingrese la coordenada y: 0\\n\"\n          + \"Ingrese la coordenada x (vacía si quiere salir): 1\\n\"\n          + \"Ingrese la coordenada y: 0\\n\"\n          + \"Ingrese la coordenada x (vacía si quiere salir): 0\\n\"\n          + \"Ingrese la coordenada y: 1\\n\"\n          + \"Ingrese la coordenada x (vacía si quiere salir):\\n\"\n          + \"El perímetro del polígono es 3.414213562373095\\n\"\n        }\n      </SyntaxHighlighter>\n\n      <h3>Ejercicio 2</h3>\n      <p>\n        En el zológico \"Animalitos Felices\" el precio de la entrada depende de la edad del visitante. Los visitantes que tengan una edad\n        de dos años o menos no pagan. Los niños entre 3 y 12 años pagan 7000 pesos. Las personas de 65 años y mayores pagan 9000 pesos. El\n        resto de las visitas paga 11500 pesos para entrar.\n\n        Escriba un programa que comience leyendo las edades de todos los visitantes de un grupo, una edad por línea. Si el usuario ingresa una\n        línea vacía, significará que no hay más visitantes en el grupo. Finalmente, el programa deberá mostrar el costo de admisión del grupo.\n      </p>\n\n      <h3>Ejercicio 3</h3>\n\n      <p>\n        Un bit de paridad es un mecanismo para detectar errores en datos transmitidos por una conexión de baja confiabilidad, como por ejemplo\n        una línea telefónica. La idea es que un bit adicional se transmite luego de transmitir un grupo de 8 bits, de manera de que un error en un\n        bit pueda ser detectado.\n\n        Los bits de paridad se pueden calcular para paridad par o impar. Si se escoge paridad par, el bit de paridad se escoge de manera\n        de que el número total de bits con valor 1 transmitidos (8 bits de datos más el bit de paridad) sea par. Por otro lado, cuando se escoge\n        paridad impar, el bit de paridad se escoge de manera de que la cantidad de 1s transmitidos sea impar.\n\n        Escriba un programa que calcule el bit de paridad para grupos de 8 bits ingresados por usuario, considerando paridad par. El programa debiese\n        leer <code>strings</code> que contengan 8 bits hasta que se ingrese una línea vacía. Después de que cada <code>string</code> se ingresa, el programa\n        debe indicar si el bit de paridad es 0 o 1. Muestre un mensaje de error apropiado si el usuario ingresa un string que sea algo distinto\n        de 8 bits. Puede usar la función <code>count</code> para resolver este problema (leer la documentación).\n      </p>\n\n      <h3>Ejercicio 4</h3>\n      <p>\n        Un string es palíndromo si al escribirlo de forma inversa es idéntico al string original. Por ejemplo los string <code>ana</code>,\n        <code>acurruca</code>, <code>Amargor pleno con el programa</code> son palíndromos. Escriba un programa que lea un string entregado por\n        el usuario y diga si es palíndromo o no.\n      </p>\n\n      <h3>Ejercicio 5</h3>\n\n      <p>\n        Un número primo es un entero mayor que 1 que es divisible únicamente por 1 y por sí mismo. Escriba una función que reciba\n        un entero como entrada y retorne <code>True</code> si el número es primo y <code>False</code> en caso contrario. Escriba luego\n        un programa que lea un número ingresado por usuario y diga si es primo o no. Como requerimiento, la función debe estar en un\n        archivo diferente al del programa, y su código debe importar la función.\n      </p>\n\n      <h3>Ejercicio 6</h3>\n      <p>Escriba una función que genere una contraseña aleatoria. La contraseña deberá tener un largo aleatorio entre 7 y 10 caracteres. Cada\n      caracter deberá ser escogido aleatoriamente desde las posiciones 33 a 126 de la tabla ASCII. Su función no deberá tener ningún parámetro.\n      La función retornará la contraseña generada. Luego, escriba un programa que importe dicha función y genere <code>N</code> contraseñas aleatorias,\n      donde <code>N</code> es dado por argumento vía <code>argv</code>. Para implementar la función, puede utilizar la función <code>chr</code>, leer\n      la documentación.</p>\n\n      <h3>Ejercicio 7</h3>\n\n      <p>Existen distintos algoritmos para ordenar listas de elementos. Un algoritmo bastante simple es el ordenamiento burbuja. El pseudocódigo\n      del algoritmo es como sigue:\n      </p>\n\n      <SyntaxHighlighter language=\"shell\" style={docco}>\n        {\n          \"procedimiento bubble_sort(lista)\\n\"\n          + \"N = largo(lista)\\n\"\n          + \"Para i = 0 a N - 1 hacer\\n\"\n          + \"    intercambiado = false\\n\"\n          + \"    para j = 0 a N - 2 hacer\\n\"\n          + \"        Si lista[j] > lista[j+1] entonces\\n\"\n          + \"            intercambiar( lista[i], lista[j+1] )\\n\"\n          + \"            intercambiado = true\\n\"\n          + \"    Si intercambiado == false entonces\\n\"\n          + \"        break\\n\"\n          + \"retornar lista\\n\"\n        }\n      </SyntaxHighlighter>\n\n      <p>Escriba una función que ordene un <code>string</code> alfabéticamente usando bubble sort. Para simplificar el problema,\n      considere que el <code>string</code> sólo contendrá caractéres numéricos y letras en minúsculas. Python implementa la comparación de\n      strings, así que puede usar el operador <code>&gt;</code>. Por otro lado los objetos de tipo string son <b>inmutables</b> por lo tanto\n      deberá transformar el <code>string</code> a <code>list</code>. Luego escriba un programa que dado un <code>string</code> ingresado por usuario,\n      muestre el string ordenado alfabéticamente.</p>\n\n      <p>Ejemplo de uso:</p>\n\n      <SyntaxHighlighter language=\"python\" style={docco}>\n        {\n          \"texto = \\\"zyxwvutsr\\\"\\n\"\n          + \"texto_lista = list(texto)\\n\"\n          + \"print(f\\\"Texto original: {texto}\\\")\\n\"\n          + \"print(f\\\"Texto ordenado: {''.join(bubble_sort(texto_lista))}\\\")\"\n        }\n      </SyntaxHighlighter>\n\n      <p>Salida:</p>\n\n      <SyntaxHighlighter language=\"shell\" style={docco}>\n        {\n          \">python bubble_sort.py\\n\"\n          + \"Texto original: zyxwvutsr\\n\"\n          + \"Texto ordenado: rstuvwxyz\"\n        }\n      </SyntaxHighlighter>\n\n    </div>\n  )\n}\n\nexport default withLayout(WeekTwo);","import React from \"react\";\nimport withLayout from \"../../components/withLayout\";\nimport MathJax from 'react-mathjax-preview';\nimport SyntaxHighlighter from 'react-syntax-highlighter';\nimport { docco } from 'react-syntax-highlighter/dist/esm/styles/hljs';\nimport { Link } from \"react-router-dom\";\n\n\nfunction WeekThree() {\n\n  return (\n    <div className='container'>\n      <h1 className='mt-5'>Estructuras de Datos y repaso de ciclos</h1>\n      <p className='lead'>\n        La semana de estructuras de datos es ya cerca de la última semana de este módulo de Introducción a Python. Es claro que\n        en un corto período de tiempo, quedan muchas características del lenguaje que explicar. Sin embargo, las herramientas entregadas\n        deberían ser suficientes para empezar a trabajar con ciencia de datos e investigar por ustedes mismos otras bibliotecas no vistas\n        en el curso.</p>\n\n      <ul>\n        <li><Link to=\"/week3#ciclos\">Repaso de ciclos y funciones</Link></li>\n        <ul>\n          <li><a href=\"#/week3#for\">Ejemplo ciclo for</a></li>\n          <li><a href=\"#/week3#while\">Ejemplo ciclo while</a></li>\n        </ul>\n        <li><Link to=\"/week3#estructuras\">Estructuras de datos típicas en Python</Link></li>\n        <li><Link to=\"/week3#complejidad\">Complejidad Asintótica</Link></li>\n        <li><Link to=\"/week3#funcionales\">Comprensiones de Lista y Operaciones Funcionales</Link></li>\n        <li><Link to=\"/week3#pandas\">Data Science con Python y Pandas</Link></li>\n      </ul>\n\n      <h2 id=\"ciclos\">Repaso de ciclos y funciones</h2>\n\n      <p>Como repasamos en clases, existen dos tipos de ciclos: <code>while</code> y <code>for</code>. En la práctica:</p>\n\n      <ul>\n        <li>Un ciclo <code>for</code> se utiliza cuando se itera sobre una secuencia (<code>list</code>, <code>string</code>, etc). Es decir, se sabe\n        de antemano la cantidad de iteraciones.</li>\n        <li>Un ciclo <code>while</code> se utiliza cuando el criterio de parada es una condición.</li>\n      </ul>\n\n      <h3 id=\"for\">Ejemplo ciclo for</h3>\n      <p>Consideremos el problema de sumar los 100 primeros números naturales. Para ello podemos usar la función <code>range</code>. Esta función\n      básicamente genera una secuencia de números (ver documentación). Para calcular la suma, además podemos usar una variable <b>acumuladora</b> que\n      irá acumulando la suma a medida que se <b>itera</b> en el ciclo. Como inicialmente la suma total es 0, el acumulador se <b>inicializa</b> en valor\n      0:</p>\n\n      <SyntaxHighlighter language=\"python\" style={docco}>\n        {\n          \"suma = 0\\n\"\n          + \"for i in range(101):\\n\"\n          + \"    suma += i\\n\"\n          + \"\\n\"\n          + \"print(f\\\"La suma de los 100 primeros números naturales es: {suma}\\\")\\n\"\n        }\n      </SyntaxHighlighter>\n\n      <p>El resultado del código debería mostrar 5050. El código funciona de la siguiente forma, primero se define una variable acumuladora, que irá\n      acumulando el resultado de la suma, la variable se le da el identificador <code>suma</code>. Posteriormente, se itera sobre los 100 primeros\n      números naturales (<code>range(101)</code> generará la secuencia <code>0, 1, 2, ..., 100</code>), en este caso <code>i</code> es la variable\n      de iteración y en cada iteración tomará un valor de la secuencia dada por <code>range</code>. Dentro del bloque del ciclo <code>for</code> se\n      agrega la instrucción de sumar cada número de la secuencia generada utilizando <code>range</code> y se actualiza el valor de la suma, haciendo\n      <code>suma += i</code> que es equivalente a hacer <code>suma = suma + i</code>. Al terminar el ciclo, debiese haberse calculado la suma deseada.\n      Queda como ejercicio para el lector, intente implementar el código anterior utilizando un ciclo <code>while</code>.</p>\n\n      <h3 id=\"while\">Ejemplo ciclo while</h3>\n      <p>Veamos ahora un ejemplo de ciclo <code>while</code>. Para ello, y como repaso, implementaremos una función que calcule la raíz\n      cuadrada de un número <code>a</code> utilizando el método de Newton-Raphson. Básicamente:</p>\n\n      <p>\n        <MathJax math={\n          `$$x_{k+1} = x_{k} - \\\\frac{x_{k}^2 - a}{2x_{k}}$$\n          Hasta que $|x_{k + 1} - x_{k}| \\\\leq tol$ y $x_0$ es arbitrario, idealmente cercano a la solución, por lo que se puede usar el valor \n          de $a$ dado por el usuario, y tol es una tolerancia dada por el usuario, consideremos por defecto precisión hasta el tercer decimal, es decir \n          $tol = 10^{-3}$.\n          `} />\n      </p>\n\n      <p>Se observa, que el criterio de detención del algoritmo es una condición, es decir, a priori no se sabe exactamente cuántas veces\n      se va a iterar. Una posible implementación de este algoritmo es como sigue:</p>\n\n      <SyntaxHighlighter language=\"python\" style={docco}>\n        {\n          \"def raiz_newton_raphson(a, tol=1e-3):\\n\"\n          + \"  x0 = a\\n\"\n          + \"  x1 = x0 - (x0 ** 2 - a) / (2 * x0)\\n\"\n          + \"\\n\"\n          + \"  while not abs(x1 - x0) <= tol:\\n\"\n          + \"      x0 = x1\\n\"\n          + \"      x1 = x0 - (x0 ** 2 - a) / (2 * x0)\\n\"\n          + \"\\n\"\n          + \"  return x1\\n\"\n        }\n      </SyntaxHighlighter>\n\n      <p>Notamos que usamos la palabra reservada <code>def</code> con la que básicamente estamos definiendo una función que podreemos\n      reutilizar. Por ejemplo, calculemos las raíces de diferentes números:</p>\n\n      <SyntaxHighlighter language=\"python\" style={docco}>\n        {\n          \"print(f\\\"La raiz de 2 es {raiz_newton_raphson(2)}\\\")\\n\"\n          + \"print(f\\\"La raiz de 25 es {raiz_newton_raphson(25)}\\\")\\n\"\n          + \"print(f\\\"La raiz de 19 es {raiz_newton_raphson(19)}\\\")\\n\"\n        }\n      </SyntaxHighlighter>\n\n      <p>Lo que entrega como salida:</p>\n\n      <SyntaxHighlighter language=\"shell\" style={docco}>\n        {\n          \"La raiz de 2 es 1.4142135623746899\\n\"\n          + \"La raiz de 25 es 5.000000000053723\\n\"\n          + \"La raiz de 19 es 4.358898943541578\\n\"\n        }\n      </SyntaxHighlighter>\n\n      <p>Estos son dos ejemplos que ilustran las diferencias entre usar ciclos <code>for</code> y <code>while</code>.</p>\n\n      <h2 id=\"estructuras\">Estructuras de datos típicas en Python</h2>\n\n      <p>Una estructura de datos es básicamente una colección de valores y relaciones entre estos valores para representar datos y operar sobre\n      ellos. Python implementa estructuras de datos típicas como por ejemplo: listas,  tuplas, conjuntos, pares llave-valor, entre otros.</p>\n\n      <h3>Listas</h3>\n\n      <p>Una lista es una colección de objetos. Para declarar una lista, se utilizan corchetes, por ejemplo, si queremos declarar una lista\n      con nombres de frutas, podemos hacer: <code>frutas = [\"pera\", \"limón\", \"manzana\"]</code>. Para obtener el tamaño de una lista, podemos\n      utilizar la función <code>len</code>, por ejemplo <code>len(frutas)</code> sería 3, ya que la lista contiene 3 elementos. Para acceder\n      a un elemento en la posición <code>i</code> de la lista, utilizamos corchetes y el índice: <code>lista[i]</code>. Cabe destacar que\n      los índices de las listas <b>comienzan desde 0</b>, por lo tanto los índices válidos van desde <code>0</code> hasta <code>n - 1</code> donde\n      <code>n</code> es el tamaño de la lista. Por ejemplo si queremos acceder al segundo elemento de la lista frutas (limón), podemos ejecutar\n      <code>frutas[1]</code>. Otra característica importante de las listas, es que son objetos <b>mutables</b> es decir, pueden alterarse en\n      tiempo de ejecución, por ejemplo si hacemos <code>frutas[0] = \"frutilla\"</code>, ahora la lista <code>frutas</code> contendrá\n      los elementos <code>[\"frutilla\", \"limón\", \"manzana\"]</code>.</p>\n\n      <h3>Tuplas</h3>\n\n      <p>Una tupla es similar a una lista, con la excepción de que una tupla es <b>inmutable</b>, es decir, una vez declarada, no puede\n      modificarse en tiempo de ejecución. Para definir una tupla, se usan paréntesis. Por ejemplo, podemos definir una tupla que contenga\n      frutas: <code>frutas = (\"pera\", \"limón\", \"manzana\")</code>. La función <code>len</code> también puede utilizarse para obtener el\n      largo de una tupla, y para acceder al elemento en la posición <code>i</code> de la tupla se hace idéntico al caso de las listas. Sin embargo,\n      si tratamos de hacer algo como <code>frutas[0] = \"frutilla\"</code>, python arrojará el siguiente\n      error: <code>TypeError: 'tuple' object does not support item assignment</code>. Esto es debido a que las tupla son inmutables. En general\n      las tuplas se utilizan cuando no se planea modificar la colección de elementos (ej. definir una constante), o se requiere una colección inmutable\n      (ej. Una \"llave\" en un par llave-valor).</p>\n\n      <h3>Set</h3>\n\n      <p>Un <code>set</code> es una colección de datos, similar a una lista, con la excepción de que no puede contener elementos repetidos. Se\n      utiliza en general para tener una \"memoria\" para consultar y hacer más eficientes algunos procesos, como por ejemplo evitar hacer\n      cálculos repetidos. Un set se define como sigue: <code>frutas = &#123;\"manzana\", \"pera\", \"piña\"&#125;</code>. Por ejemplo, supongamos que\n      quisiera saber si el plátano está dentro del set, esta consulta se haría mediante: <code>\"plátano\" in frutas</code>, y en este caso\n      retornaría <code>False</code>. Esta operación también se puede hacer en listas, pero es menos eficiente que en sets, debido a que\n      la complejidad asintótica de buscar un elemento en una lista es mayor a la complejidad asintótica de buscar un elemento en un set. Para\n      mas detalle, referirse a la sección de complejidad asintótica.</p>\n\n      <h3>Diccionarios</h3>\n\n      <p>Esto lo veremos en la última semana del curso, pero vale la pena digerirlo de inmediato. Un diccionario es un conjunto de pares\n      clave-valor, y que son eficientes para consultar elementos (básicamente las claves están almacenadas en una estructura similar a un set).\n      Por ejemplo, supongamos que queremos implementar una bolsa de supermercado, se podría hacer algo\n      como: <code>compras = &#123; \"platano\": 3, \"peras\": 2, \"manzana\": 1 &#125;</code>. Luego, si quisiera consultar por cuántas manzanas\n      tiene el cliente, podría hacer algo como: <code>compras[\"manzana\"]</code>, lo cual retornaría 1. La restricción de los diccionarios es\n      que las claves deben ser <b>inmutables</b>.</p>\n\n      <h2 id=\"complejidad\">Complejidad Asintótica</h2>\n\n      <p>Estos son temas bastante relevantes a la hora de resolver problemas reales. Lo digo por experiencia propia, muchos algoritmos, o modelos\n      de machine learning o de procesamiento de datos, podrían no correr dependiendo del volumen y recursos computacionales disponibles. Y esto no\n      lo resuelve mágicamente tener computación en la \"nube\" (que teóricamente no hay diferencia entre eso y tener un data center). Hay algoritmos\n      que no escalan, y principalmente es porque tienen que resolver problemas de optización que no escalan o que no son paralelizables para\n      computarlos en tiempos prácticos. Dado que el curso es pequeño, no puedo pretender abordar todo, pero sí puedo dar una pincelada de qué\n      significa la complejidad asintótica. Para ello tomemos como ejemplo el problema de buscar un elemento en una lista.</p>\n\n      <p>Para simplificar el problema, supongamos que tenemos una lista de enteros, y supongamos que queremos saber si el elemento <code>n</code>\n      se encuentra dentro de la lista. Un algoritmo sencillo sería, iterar por cada elemento de la lista, y si el elemento coincide con el\n      elemento buscado, <b>retornar</b> <code>True</code>, si la búsqueda termina y no se encuentra el elemento retornar <b>False</b>.</p>\n\n      <SyntaxHighlighter language=\"python\" style={docco}>\n        {\n          \"def busqueda_lineal(lista, n):\\n\"\n          + \"  for item in lista:\\n\"\n          + \"      if item == n:\\n\"\n          + \"          return True\\n\"\n          + \"  return False\\n\"\n        }\n      </SyntaxHighlighter>\n\n\n      <p> Tenemos diferentes casos posibles:</p>\n\n      <ul>\n        <li>El caso optimista: El elemento se encuentra en la primera posición de la lista, por lo tanto se itera una sóla vez.</li>\n        <li>El peor caso: El elemento se encuentra al final de la lista. Por lo tanto se debería iterar <code>n</code> veces donde <code>n</code> es\n        la cantidad de elementos de la lista.</li>\n        <li>El caso promedio: Donde se revisarán una cantidad de elementos proporcional a la cantidad de elementos de la lista.</li>\n      </ul>\n\n      <p>\n        <MathJax math={\n          `Es intuitivo que se iterará una cantidad de veces proporcional a $n$, y a lo mucho, se iterará $n$ veces. Para expresar esta inituición \n          se utiliza lo que se conoce como notación $Big$-$O$, y en este caso se dice que el algoritmo es $O(n)$, es decir que su tiempo de ejecución \n          será proporcional a la entrada, en este caso el largo de la lista de entrada. El algoritmo de búsqueda mencionado se conoce como <b>búsqueda lineal</b> y \n          la razón de ello es que su complejidad asintótica ($big$-$O$) es proporcional al largo de la lista, básicamente el tiempo de ejecución podría \n          expresarse como una función lineal $T(n) = an + b$ del largo de la lista. \n          `} />\n      </p>\n\n      <p>Supongamos ahora que la lista de números se encuentra ordenada. ¿Será posible hacer la búsqueda más eficiente? (que el tiempo de ejecución\n      sea menor). Si la lista estuviese ordenada, por ejemplo <code>1, 2, 3, 100, 993, 1000, 2934</code>, podríamos pensar una forma más inteligente de buscar.\n      Por ejemolo, supongamos que buscamos el número <code>993</code>. Podríamos empezar por el medio de la lista, es decir, el elemento que esté\n      en la posición <code>(0 + 6)//2 = 3</code> (6 es el largo de la lista y // representa la división entera). Comenzaríamos entonces por el\n      elemento en el índice 3, que en este caso sería 100. Se tiene que <code>100 != 993</code>, pero además sabemos que la lista está ordenada,\n      por lo tanto podemos descartar todos los elementos que estén entre las posiciones 0 y 3, y buscar elementos entre las posiciones 3 y 6. Podemos\n      nuevamente buscar el punto medio <code>(3 + 6)//2 = 4</code>, y en este caso encontramos el número <code>993</code></p>.\n\n      <p>\n        <MathJax math={\n          `Si se observa, el espacio de búsqueda se va dividiendo a la mitad en cada iteración. Por lo tanto, el número máximo de iteraciones \n          que pueden ocurrir es $log_2(n)$, por lo tanto, decimos que la complejidad asintótica de este algoritmo de búsqueda es $O(log_2(n))$.\n          `} />\n      </p>\n\n      <p>Este algorítmo clásico de búsqueda, se conoce como <b>búsqueda binaria</b> y se implementaría como sigue:</p>\n\n      <SyntaxHighlighter language=\"python\" style={docco}>\n        {\n          \"def busqueda_binaria(lista, n):\\n\"\n          + \"  found = False\\n\"\n          + \"  a = 0\\n\"\n          + \"  b = len(lista) - 1\\n\"\n          + \"  while not found and a <= b:\\n\"\n          + \"      mid = (a + b) // 2\\n\"\n          + \"      if lista[mid] == n:\\n\"\n          + \"          found = True\\n\"\n          + \"      elif n > lista[mid]:\\n\"\n          + \"          a = mid + 1\\n\"\n          + \"      else:\\n\"\n          + \"          b = mid - 1\\n\"\n          + \"  return found\\n\"\n        }\n      </SyntaxHighlighter>\n\n      <p>\n        <MathJax math={\n          `Consideremos un caso más simple ahora. Supongamos que queremos calcular la suma de los $n$ primeros números naturales. Hasta ahora \n          hemos visto dos formas de lograr esto. Una forma puede ser con un ciclo y un acumulador, ¿Qué complejidad asintótica tiene este algoritmo? \n          Como se observa, se itera $n$ veces, donde $n$ es la entrada del algoritmo, por lo tanto la complejidad asintótica sería $O(n)$ es decir, \n          el tiempo de cómputo sería proporcional al valor de $n$ en este algoritmo. ¿Podemos hacerlo más eficiente? Si recuerdan en la semana 1, vimos \n          la fórmula de Gauss:\n\n          $$\\\\sum_{i=0}^n i = \\\\frac{n(n+1)}{2}$$\n\n          Básicamente, el resultado se obtiene con un sólo cálculo, e independiente del valor de n, se requiere la misma serie de operaciones aritméticas \n          para obtener el resultado de la sumatoria. Por lo tanto decimos que este algoritmo es de complejidad constante, y la notación es $O(1)$. En \n          este caso independiente del valor de $n$, el tiempo de ejecución no varía.\n          `} />\n      </p>\n\n      <p>Para las estructuras de datos típicas en python, y la complejidad asintótica de sus operaciones (métodos), puede revisar\n      <a href=\"https://wiki.python.org/moin/TimeComplexity\" rel=\"noopener noreferrer\" target=\"_blank\"> la documentación de python</a>.</p>\n\n      <h2 id=\"funcionales\">Comprensiones de Lista y Operaciones Funcionales</h2>\n\n      <p>Este es un tópico bien <em>pythónico</em> en el sentido de que es la forma python de escribir código. Al principio se puede hacer un\n      poco complejo de entender, pero con práctica, creanme que ahorra bastante tiempo saber esta característica de python, por las siguientes\n      razones:</p>\n\n      <ul>\n        <li>Escribir código se hace más rápido y menos repetitivo</li>\n        <li>No todas las personas tienen el mismo estilo al escribir código, por lo que les ayudará a diversificar su entendimiento códigos python.</li>\n      </ul>\n\n      <h3>Comprensiones de Listas</h3>\n\n      <p>Las comprensiones de lista son una forma compacta de generar listas en python. Por ejemplo, supongamos que queremos los números entre 1 y\n      300 que sean divisibles por 3 y por 5. Existen varias formas de hacer esto, pero una forma compacta de\n      lograrlo en python sería como sigue: <code>numeros = [n for n in range(1, 301) if n % 3 == 0 and n % 5 == 0]</code>. Dicho código se puede leer\n      como <em>Quiero todos los n, que estén en el rango 1 a 300, y que sean divisibles por 3 y por 5.</em>.</p>\n\n      <h3>Operaciones Funcionales</h3>\n\n      <p>Python tiene una biblioteca de operaciones que siguen un paradigma de programación funcional. La idea de este paradigma es que agiliza el\n      prototipado, permitiendo escribir poco código que realiza operaciones compuestas. La desventaja de este paradigma, es que es un poco complicado\n      de entender al comienzo, sobre todo si hemos estado aprendiendo un paradigma procedural (que es lo que hemos estado haciendo desde las primeras\n      semanas). Las funciones que se utilizan frecuentemente son: <code>map</code>, <code>filter</code>, <code>reduce</code>.</p>\n\n      <p>La función <code>map</code>, básicamente le aplica una función a todos los elementos de una secuencia, y retorna una secuencia con\n      los retornos de la función aplicada. Veamos dos ejemplos, uno simple y uno más sofisticado. Para el caso simple, supongamos que tenemos una\n      lista de números y queremos si los números son divisibles por 3 y por 5</p>\n\n      <SyntaxHighlighter language=\"python\" style={docco}>\n        {\n          \"lista = [1, 2, 15, 4, 256, 100, 60]\\n\"\n          + \"for result in map(lambda x: x % 3 == 0 or x % 5 == 0, lista):\\n\"\n          + \"    print(result)\\n\"\n        }\n      </SyntaxHighlighter>\n\n      <SyntaxHighlighter language=\"shell\" style={docco}>\n        {\n          \"False\\n\"\n          + \"False\\n\"\n          + \"True\\n\"\n          + \"False\\n\"\n          + \"False\\n\"\n          + \"True\\n\"\n          + \"True\\n\"\n        }\n      </SyntaxHighlighter>\n\n      <p>Notar que usamos una expresión que no habíamos visto antes: <code>lambda</code>. No se asusten, lo que hace <code>lambda</code> es básicamente\n      definir una <b>función anonima</b>, es decir, una función sin nombre. La sintaxis es similar a la de las funciones y sigue\n      el siguiente patrón: <code>lambda argumentos: retorno</code>. Por lo que, el siguiente código es equivalente:</p>\n\n      <SyntaxHighlighter language=\"python\" style={docco}>\n        {\n          \"def divisible_por_5_o_3(n):\\n\"\n          + \"  return n % 3 == 0 or n % 5 == 0\\n\"\n          + \"\\n\"\n          + \"\\n\"\n          + \"lista = [1, 2, 15, 4, 256, 100, 60]\\n\"\n          + \"for result in map(divisible_por_5_o_3, lista):\\n\"\n          + \"    print(result)\\n\"\n        }\n      </SyntaxHighlighter>\n\n      <p>La ventaja de usar <code>lambda</code> es, si requiero una función que sólo utilizaré una vez, ¿para qué agregar más código definiendola\n      vía <code>def</code> si puedo definirla en la misma línea que la utilizaré? Esto permite agilizar escribir código.</p>\n\n      <p>Ahora un ejemplo sofisticado, supongamos que tenemos una lista de oraciones, y queremos contar la cantidad de palabras positivas de las\n      oraciones. Por el momento, supongamos que las palabras positivas están en un set. Podríamos aplicar la función map como sigue:</p>\n\n      <SyntaxHighlighter language=\"python\" style={docco}>\n        {\n          \"PALABRAS_POSITIVAS = {\\n\"\n          + \"  \\\"beneficios\\\",\\n\"\n          + \"  \\\"excelentes\\\",\\n\"\n          + \"  \\\"buen\\\",\\n\"\n          + \"  \\\"positivo\\\",\\n\"\n          + \"  \\\"optimista\\\",\\n\"\n          + \"  \\\"encanta\\\",\\n\"\n          + \"  \\\"bien\\\",\\n\"\n          + \"}\\n\"\n          + \"\\n\"\n          + \"oraciones = [\\n\"\n          + \"    \\\"El producto es un asco\\\",\\n\"\n          + \"    \\\"Los beneficios son excelentes\\\",\\n\"\n          + \"    \\\"En el restorán tuve un muy buen servicio\\\",\\n\"\n          + \"    \\\"Soy muy positivo y optimista y me encanta hablar bien de los demás\\\",\\n\"\n          + \"]\\n\"\n          + \"\\n\"\n          + \"conteo = map(lambda s: sum(s.count(w) for w in PALABRAS_POSITIVAS), oraciones)\\n\"\n          + \"for index, conteo in enumerate(conteo):\\n\"\n          + \"    print(f\\\"Palabras positivas oración {index + 1}: {conteo}\\\")\\n\"\n        }\n      </SyntaxHighlighter>\n\n      <p>Lo que da como salida:</p>\n\n      <SyntaxHighlighter language=\"shell\" style={docco}>\n        {\n          \"Palabras positivas oración 1: 0\\n\"\n          + \"Palabras positivas oración 2: 2\\n\"\n          + \"Palabras positivas oración 3: 1\\n\"\n          + \"Palabras positivas oración 4: 4\\n\"\n        }\n      </SyntaxHighlighter>\n\n      <p>La función <code>filter</code>, como el nombre lo sugiere, filtra una secuencia, en base a una función, y elimina los elementos que\n      no retornen <code>True</code> para esa función. Por ejemplo, supongamos que tenemos una lista de palabras, y queremos sólo las palabras\n      con más de 3 caractéres:</p>\n\n      <SyntaxHighlighter language=\"python\" style={docco}>\n        {\n          \"palabras = [\\\"el\\\", \\\"animal\\\", \\\"come\\\", \\\"las\\\", \\\"América\\\", \\\"lo\\\", \\\"pos\\\", \\\"laguna\\\"]\\n\"\n          + \"for palabra in filter(lambda x: len(x) > 3, palabras):\\n\"\n          + \"    print(palabra)\\n\"\n        }\n      </SyntaxHighlighter>\n\n      <SyntaxHighlighter language=\"shell\" style={docco}>\n        {\n          \"animal\\n\"\n          + \"come\\n\"\n          + \"América\\n\"\n          + \"laguna\\n\"\n        }\n      </SyntaxHighlighter>\n\n      <p>Finalmente la función <code>reduce</code>, es la forma funcional de agregar datos. Supongamos que queremos calcular la sumatoria\n      de una lista de números. Esto podría hacerse iterando por cada elemento de la lista o secuencia, e ir acumulando los resultados de la suma.\n      Sin embargo reduce, permite implementar este patrón, de forma simple con una función que reciba dos argumentos y agregando los datos:</p>\n\n      <SyntaxHighlighter language=\"python\" style={docco}>\n        {\n          \"from functools import reduce\\n\"\n          + \"\\n\"\n          + \"\\n\"\n          + \"lista = [1, 4, 9, 7, 10, 11]\\n\"\n          + \"print(reduce(lambda x, y: x + y, lista))\\n\"\n        }\n      </SyntaxHighlighter>\n\n      <p>El resultado de la operación anterior es <code>42</code>. La forma en que opera reduce es la siguiente:</p>\n\n      <ul>\n        <li><code>(((((1 + 4) + 9) + 7) + 10) + 11)</code></li>\n        <li><code>((((5 + 9) + 7) + 10) + 11)</code></li>\n        <li><code>(((14 + 7) + 10) + 11)</code></li>\n        <li><code>((21 + 10) + 11)</code></li>\n        <li><code>(31 + 11)</code></li>\n        <li><code>42</code></li>\n      </ul>\n\n      <p>Claro que el poder de <code>reduce</code> no es únicamente calcular la suma de los elementos de una secuencia, si no que\n      puede realizar cualquier operación de agregado de una secuencia.</p>\n\n      <h2 id=\"pandas\">Data Science con Python y Pandas</h2>\n\n      <p>No es que el lenguaje python esté directamente ligado con Ciencia de Datos, ni nada por el estilo. La ciencia de datos es agnóstica\n      al lenguaje, sin embargo, Python es un lenguaje simple de aprender, rápido de escribir, tiene eficiencia para la mayoría de los casos de uso\n      y mucho soporte de la comunidad. Por las razones mencionadas, es que se han desarrollado muchas bibliotecas que ayudan a resolver problemas\n      de ciencia de datos. Una de las bibliotecas más utilizadas para manipulación de datos es <code>pandas</code>. Pandas básicamente permite manejar\n      datos de forma tabular, usando como abstracción o representación los objetos de tipo <code>DataFrame</code>. Dicha abstracción, permite extraer\n      datos de diferentes fuentes y tener la misma representación sobre los datos, lo que permite fácil acceso y operación.</p>\n\n      <p>Dentro del curso trabajaremos con archivos <code>.csv</code>, pero <code>pandas</code> soporta una gran variedad de fuentes de datos\n      tales como: <code>excel</code>, datos de APIs como por ejemplo una API que envíe objetos <code>JSON</code>, diferentes motores de BBDD, etc.\n      En la práctica, es más común leer datos de BBDD, y por lo general, los que mantienen la plataforma de datos son el equipo de Ingeniería de Datos,\n      en lo que comúnmente se conoce como <em>Data Warehouse</em>. También en la industria se escuchan varios conceptos rimbombantes, como por ejemplo\n      <em>data lake</em>, pero eso sólo significa que es un \"repositorio\" donde hay datos en su forma \"cruda\" (por ejemplo un disco en la nube), aunque\n      tu propia laptop podría ser un data lake (tienes textos, bytes, archivos en múltiples formatos sin procesar).</p>\n\n      <p>Dejo a continuación un ejemplo de pandas, donde podrán revisar operaciones básicas y algunos consejos:</p>\n\n      <p>\n        <a\n          href=\"https://github.com/dpalmasan/homepage/blob/master/notebooks/intro_python/Ejemplo%20Pandas%20Intro%20Python.ipynb\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >Ver ejemplo de pandas</a>\n      </p>\n\n      <h2>Ejercicios</h2>\n      <h3>Ejercicio 1</h3>\n      <p>Escriba, utilizando comprensiones de lista una función que genere los números pares desde 2 hasta n, donde n es un argumento de la función.</p>\n\n      <h3>Ejercicio 2</h3>\n      <p>Escriba una función que dada una lista de <code>float</code> entregue la desviación estándar de la muestra.</p>\n\n      <h3>Ejercicio 3</h3>\n      <p>Escriba una función que dadas dos vectores representados como listas numéricas, calcule el coseno de dichos vectores.</p>\n\n      <p>\n        <MathJax math={\n          `El coseno entre dos vectores $u$ y $v$ puede calcularse como:\n\n          $$cos(u, v) = \\\\frac{u\\\\cdot v}{\\\\|u\\\\|\\\\|v\\\\|}$$\n\n          Donde $u\\\\cdot v = \\\\sum_{i=0}^{n - 1} u_iv_i$ y para un vector $x$ arbitrario $\\\\|x\\\\| = \\\\sqrt{\\\\sum_{i=0}^{n-1} x_i^2}$. Notar que para \n          las componentes del vector, utilizamos los índices desde $0$ hasta $n-1$ para coincidir con las listas. Para implementar el coseno puede \n          implementar 3 funciones: <code>producto_punto(u, v)</code>, <code>norma(x)</code> y utilizando estas dos funciones, puede \n          implementar la función <code>coseno(u, v)</code>. \n          `} />\n      </p>\n\n      <p><b>Voy a agregar más ejercicios simples de repaso, sigo buscando.</b></p>\n\n      <h2>Ejercicios avanzados</h2>\n      <h3>Pregunta 1</h3>\n      <p>Un número feliz, es un número que lleva a 1 luego de aplicarle una secuencia de pasos, en las cuales en cada paso, el número\n      es reemplazado por la suma de los cuadrados de sus dígitos, es decir, si seguimos haciendo este reemplazo, eventualmente llegaremos\n      a 1. Por ejemplo, 19 es un número feliz, ya que:</p>\n\n      <ul>\n        <li><code>1^2 + 9^2 = 82</code></li>\n        <li><code>8^2 + 2^2 = 68</code></li>\n        <li><code>6^2 + 8^2 = 100</code></li>\n        <li><code>1^2 + 0^2 + 0^2= 1</code></li>\n      </ul>\n\n      Por otro lado, 20 no es un número feliz, ya que:\n\n      <ul>\n        <li><code>2^2 + 0^2 = 4</code></li>\n        <li><code>4^2 = 16</code></li>\n        <li><code>1^2 + 6^2 = 37</code></li>\n        <li><code>3^2 + 7^2= 58</code></li>\n        <li><code>5^2 + 8^2= 89</code></li>\n        <li><code>8^2 + 9^2= 145</code></li>\n        <li><code>1^2 + 4^2 + 5^2= 42</code></li>\n        <li><code>4^2 + 2^2 = 20</code></li>\n      </ul>\n\n      <p>Escriba una función que reciba un número como argumento de entrada y retorne <code>True</code> si el número es feliz y <code>False</code> en\n      caso contrario.</p>\n\n      <h3>Pregunta 2</h3>\n\n      <p>Dado un <code>string</code>, excriba una función que ordene el string de acuerdo a la frecuencia de cada caracter, en orden\n      ascendente. Si dos elementos tienen la misma frecuencia, se considera el orden lexicográfico. Por ejemplo, considere el\n      string <code>halalelluejah</code> debe ser ordenado como <code>llllaaahheeuj</code>, si el string es <code>aaaabeebccccc</code> debe\n      ser ordenado como <code>cccccaaaabbee</code>.</p>\n\n      <h3>Pregunta 3</h3>\n\n      <p>Implemente una función que dada una lista de enteros, retorne la máxima diferencia entre dos elementos de la lista, tal que\n      el elemento mayor aparezca después del elemento menor en la lista (es decir si <code>maxdiff = lista[j] - lista[i], j &gt; i</code>) Analice la\n      complejidad asintótica de su algoritmo</p>\n      <MathJax math={\n        `Tip: Una solución simple puede ser implementada en $O(n^2)$, implemente y justifique. ¿Puede resolver este problema en $O(n)$? \n        Implemente un algoritmo en caso afirmativo. ¿Puede resolverse en $O(1)$? Justifique su respuesta.\n          `} />\n\n    </div>\n  )\n}\n\nexport default withLayout(WeekThree);","import React from \"react\";\nimport withLayout from \"../../components/withLayout\";\nimport MathJax from 'react-mathjax-preview';\nimport SyntaxHighlighter from 'react-syntax-highlighter';\nimport { docco } from 'react-syntax-highlighter/dist/esm/styles/hljs';\n\n\nfunction WeekFour() {\n\n  return (\n    <div className='container'>\n      <h1 className='mt-5'>APIs</h1>\n      <p className='lead'>\n        Esta semana es de APIs, un tema bastante importante y que es bueno tener conocimiento. Por ejemplo, existen fuentes de datos de terceros\n        con las cuales uno se comunica vía peticiones HTTP. Desde el lado de la fuente de datos (usualmente un servidor externo), para pedir datos\n        específicos, se define una API (del inglés <em>Application Programming Interface</em>, que es básicamente un contrato que especifica funciones,\n        parámetros, entradas y salidas, sin dar detalle de como están construidas internamente. Una API sea por web o directamente, puede pensarse\n        como un conjunto de funciones que reciben entradas y salidas, la diferencia en este caso con las funciones que hemos visto en python, es que\n        los datos se transmitten vía web.</p>\n\n      <h3>Un poco más sobre diccionarios</h3>\n\n      <p>Dado que dentro del curso lidiaremos con APIs que entregan datos en forma de <code>JSON</code> (aunque hay otras APIs web que no necesariamente usan\n      <code>JSON</code> para ello), es que debemos tener conocimiento y dominio sobre diccionarios, ya que un <code>JSON</code> tiene bastante similitudes\n      con los diccionarios en python. Por ello, primero repasaremos un poco de diccionarios. Para los ejemplos que siguen, consideremos el siguiente\n      diccionario, que contendrá peak de usuarios diarios logueados en un sitio ficticio:</p>\n\n      <SyntaxHighlighter language=\"python\" style={docco}>\n        {\n          'usuarios_log = {\\n'\n          + '    \"Lunes\": 140,\\n'\n          + '    \"Martes\": 200,\\n'\n          + '    \"Miércoles\": 360,\\n'\n          + '    \"Jueves\": 140,\\n'\n          + '    \"Viernes\": 200,\\n'\n          + '    \"Sábado\": 140,\\n'\n          + '    \"Domingo\": 140\\n'\n          + '}\\n'\n        }\n      </SyntaxHighlighter>\n\n      <p>Como ya se expuso en el material complementario de la semana 3, un diccionario es un conjunto de clave-valor, que permite eficientemente\n      acceder a una clave determinada y extraer el valor de ella. Por ejemplo, si queremos ver la cantidad de clicks que hubo el Jueves, se podría\n      hacer vía <code>usuarios_log['Jueves']</code>. Supongamos ahora, que queremos mostrar todas las claves y valores del diccionario. Al igual que\n      las listas, los <code>strings</code>, los diccionarios soportan iteraciones. Por ejemplo, si queremos mostrar la cantidad de usuarios para\n      todos los días, la forma <em>pythónica</em> de hacerlo es:</p>\n\n\n      <SyntaxHighlighter language=\"python\" style={docco}>\n        {\n          'for dia, conteo_usuarios in usuarios_log.items():\\n'\n          + '    print(f\"Usuarios {dia}: {conteo_usuarios}\")\\n'\n        }\n      </SyntaxHighlighter>\n\n      <SyntaxHighlighter language=\"shell\" style={docco}>\n        {\n          'Usuarios Lunes: 140\\n'\n          + 'Usuarios Martes: 200\\n'\n          + 'Usuarios Miércoles: 360\\n'\n          + 'Usuarios Jueves: 140\\n'\n          + 'Usuarios Viernes: 200\\n'\n          + 'Usuarios Sábado: 140\\n'\n          + 'Usuarios Domingo: 140\\n'\n        }\n      </SyntaxHighlighter>\n\n      <p>Supongamos ahora, que queremos saber los días en que la cantidad de usuarios fue menor que <code>190</code>, ello se podría hacer\n      combinando iteraciones con condiciones, como sigue:</p>\n\n      <SyntaxHighlighter language=\"python\" style={docco}>\n        {\n          'for dia, conteo_usuarios in usuarios_log.items():\\n'\n          + '    if conteo_usuarios < 190:\\n'\n          + '        print(f\"{dia}\")\\n'\n        }\n      </SyntaxHighlighter>\n\n      <SyntaxHighlighter language=\"shell\" style={docco}>\n        {\n          'Lunes\\n'\n          + 'Jueves\\n'\n          + 'Sábado\\n'\n          + 'Domingo\\n'\n        }\n      </SyntaxHighlighter>\n\n      <p>Supongamos que queremos calcular la cantidad de usuarios promedio conectados durante la semana y durante el fin de semana. Para ello podemos\n      implementar una función <code>es_fin_de_semana</code>.</p>\n\n      <SyntaxHighlighter language=\"python\" style={docco}>\n        {\n          'def es_fin_de_semana(dia):\\n'\n          + '    return dia in {\"Sábado\", \"Domingo\"}\\n'\n          + '\\n'\n          + '\\n'\n          + 'usuarios_semana = {}\\n'\n          + 'WEEKDAY_KEY = \"Día de Semana\"\\n'\n          + 'WEEKEND_KEY = \"Fin de Semana\"\\n'\n          + '\\n'\n          + 'for dia, conteo_usuarios in usuarios_log.items():\\n'\n          + '    if es_fin_de_semana(dia):\\n'\n          + '        usuarios_semana[WEEKEND_KEY] = (\\n'\n          + '            usuarios_semana.get(WEEKEND_KEY, 0) + conteo_usuarios\\n'\n          + '        )\\n'\n          + '    else:\\n'\n          + '        usuarios_semana[WEEKDAY_KEY] = (\\n'\n          + '            usuarios_semana.get(WEEKDAY_KEY, 0) + conteo_usuarios\\n'\n          + '        )\\n'\n          + '\\n'\n          + 'usuarios_semana[WEEKEND_KEY] /= 2\\n'\n          + 'usuarios_semana[WEEKDAY_KEY] /= 5\\n'\n          + 'print(usuarios_semana)\\n'\n        }\n      </SyntaxHighlighter>\n\n      <SyntaxHighlighter language=\"shell\" style={docco}>\n        {\n          \"{'Día de Semana': 208.0, 'Fin de Semana': 140.0}\"\n        }\n      </SyntaxHighlighter>\n\n      <h4>Fé de erratas a contenido de diapositivas y quizás sesión online</h4>\n\n      <p>Revisando el material me encontré con ejemplos de cómo contar ocurrencias en un diccionario, usando <code>groupby</code> de la\n      biblioteca <code>itertools</code>. Si bien, se puede lograr lo esperado, es mala idea hacerlo de esa forma, porque sobre-complica un\n      problema que en esencia es simple de resolver. El ejemplo que muestra el material es el siguiente:</p>\n\n      <SyntaxHighlighter language=\"python\" style={docco}>\n        {\n          \"lista = [1, 2, 6, 7, 2, 5, 8, 9, 1, 2, 9, 7]\\n\"\n          + \"lista.sort()\\n\"\n          + \"diccionario = {k: len(list(v)) for k, v in groupby(lista)}\\n\"\n          + \"print(diccionario)\\n\"\n        }\n      </SyntaxHighlighter>\n\n      <p>Para los que tengan alguna experiencia en bases de datos y alguna variación de <code>SQL</code>, el <code>groupby</code> del\n      módulo <code>itertools</code> no es como el de <code>SQL</code> (ese sí se usa para agrupar y contar). En este caso, <code>groupby</code> es simiar\n      a <code>uniq</code> de <code>UNIX</code> (pueden leer la documentación para mas detalle).</p>\n      <p>\n        <MathJax math={\n          `Por otro lado, el código funciona correctamente pero es sobre-complicar un problema que en esencia es simple. Además, requiere ordenar la lista \n          para artificialmente aplicar <code>groupby</code> y contar elementos. No sé si recuerdan el material complementario de complejidad \n          asintótica. Ordenar una lista tiene una complejidad asintótica $O(n\\\\cdot log(n))$, pero el problema de contar elementos tiene una \n          complejidad asintótica $O(n)$, por lo tanto: ¡Además de sobre-complicar el problema, lo estamos haciendo ineficientemente! De hecho \n          para contar elementos en una lista, está la función <code>Counter</code> de la biblioteca <code>collections</code>, que se puede \n          importar usando <code>from collections import Counter</code>. El código de arriba sería reemplazado por:\n          `} />\n      </p>\n\n      <SyntaxHighlighter language=\"python\" style={docco}>\n        {\n          \"diccionario = Counter(lista)\\n\"\n          + \"print(diccionario)\\n\"\n        }\n      </SyntaxHighlighter>\n\n      <p>Como se puede observar, es mucho más simple de leer y además es más eficiente. Por completitud, supongamos que tenemos un diccionario\n      de usuarios y sus tallas de plan móvil para su celular (<code>XS, S, M</code>), y queremos saber cuántos usuarios poseen una talla determinada.</p>\n\n      <SyntaxHighlighter language=\"python\" style={docco}>\n        {\n          'personas = {\\n'\n          + '    \"id1\": \"XS\",\\n'\n          + '    \"id2\": \"S\",\\n'\n          + '    \"id3\": \"S\",\\n'\n          + '    \"id4\": \"M\",\\n'\n          + '    \"id5\": \"XS\",\\n'\n          + '    \"id6\": \"XS\",\\n'\n          + '    \"id7\": \"M\",\\n'\n          + '    \"id8\": \"XS\",\\n'\n          + '    \"id9\": \"S\",\\n'\n          + '}\\n'\n        }\n      </SyntaxHighlighter>\n\n\n      <p>Este problema lo podemos ver como un problema de contar ocurrencias, y se puede resolver como sigue:</p>\n\n\n      <SyntaxHighlighter language=\"python\" style={docco}>\n        {\n          'conteo_tallas = {}\\n'\n          + 'for persona_id, talla in personas.items():\\n'\n          + '    conteo_tallas[talla] = conteo_tallas.get(talla, 0) + 1\\n'\n          + '\\n'\n          + 'print(conteo_tallas)\\n'\n          + '\\n'\n          + '# Usando Counter\\n'\n          + 'conteo_tallas2 = Counter(personas.values())\\n'\n          + 'print(conteo_tallas2)\\n'\n        }\n      </SyntaxHighlighter>\n\n      <h3>APIs web y peticiones HTTP</h3>\n\n      <p>En esta sección no ahondaré mucho en detalles sobre cómo funciona una API, definir cliente servidor, ya que eso debiese estar cubierto\n      en el material de las sesiones online. Sin embargo, me gustaría mostrar un ejemplo práctico de comunicarse con una API en python usando la\n      biblioteca <code>requests</code>. ¿Por qué es importante saber sobre APIs web? En particular, muchos servicios por terceros (ejemplos: Amazon Web\n      Services, servicios de Google Cloud Platform, Facebook, Paypal, Pingdom, etc.) ofrecen APIs web para traer datos. Esto se conoce como fuentes\n      externas de datos, y sirve en caso de que se quiera proponer extraer otro tipo de datos para agregar a modelos de analítica, o para incluso corregir\n      datos que ya hayan sido ingestado a las tablas.</p>\n\n      <h4>Jugando con peticiones web</h4>\n\n      <p>De las sesiones online, deben haber visto al menos 4 diferentes métodos para peticiones\n      web: <code>GET</code>, <code>POST</code>, <code>PUT</code>, <code>DELETE</code>. Existen otros métodos, pero de momento no será necesario ahondar\n      en ellos. Por otro lado, <b>una aclaración</b>, he visto en la práctica que muchas <code>API</code> que retornarn <code>JSON</code> por alguna\n      razón se les llama <code>API REST</code>, sin embargo esto a muchas veces es incorrecto. Si quieren realmente entender lo que significa <code>REST</code>,\n      pueden leer la tesis del creador de este estilo\n      arquitectural: <a href=\"https://www.ics.uci.edu/~fielding/pubs/dissertation/top.htm\" without rel=\"noopener noreferrer\" target=\"_blank\">REST thesis</a>. Esto lo detallo por completitud,\n      en la práctica muchas veces se les llama <code>API REST</code> a <code>APIs</code> que no siguen realmente esta arquitectura.</p>\n\n      <p>\n        Para el ejemplo de diferentes métodos, utilizaremos <a href=\"https://reqres.in/\" without rel=\"noopener noreferrer\" target=\"_blank\">reqres</a>, que es básicamente un sitio\n        donde podemos testear métodos de una API. Si instalaron <code>POSTMAN</code>, pueden usar esa herramienta para trabajar. Yo en particular, prefiero\n        hacerlo por términal ya que siento que es más rápido. Así que alternativamente al material de <code>POSTMAN</code> que hay online, les enseñaré\n        a enviar requests vía terminal. Para no extenderme mucho, sólo pondré ejemplos de métodos <code>GET</code> y <code>POST</code>.\n      </p>\n\n      <p>\n        Supongamos que queremos listar los usuarios de la <code>API</code>. Según el sitio, el punto de acceso, o <code>url</code> es\n        el siguiente: <code>https://reqres.in/api/users</code>. Enviaremos una petición web a esta <code>url</code>, pondré dos alternativas\n        para hacerlo, una es vía el comando <code>curl</code> (si tienes una terminal basada <code>UNIX</code>, es\n        decir <code>Linux</code> o <code>MacOS</code>). En <code>Windows</code>, sólo proveeré una alternativa usando <code>Powershell</code>, ya que\n        creo que no viene nativamente instalado un programa en <code>cmd</code>, por lo tanto, si no tienen <code>Powershell</code>, usen <code>POSTMAN</code>.\n      </p>\n\n      <SyntaxHighlighter language=\"shell\" style={docco}>\n        {\n          'curl https://reqres.in/api/users\\n'\n          + '{\"page\":1,\"per_page\":6,\"total\":12,\"total_pages\":2,\"data\":\\n'\n          + '[{\"id\":1,\"email\":\"george.bluth@reqres.in\",\"first_name\":\"George\",\"last_name\":\"Bluth\",\"avatar\":\"https://s3.amazonaws.com/uifaces/faces/twitter/calebogden/128.jpg\"},\\n'\n          + '{\"id\":2,\"email\":\"janet.weaver@reqres.in\",\"first_name\":\"Janet\",\"last_name\":\"Weaver\",\"avatar\":\"https://s3.amazonaws.com/uifaces/faces/twitter/josephstein/128.jpg\"},\\n'\n          + '{\"id\":3,\"email\":\"emma.wong@reqres.in\",\"first_name\":\"Emma\",\"last_name\":\"Wong\",\"avatar\":\"https://s3.amazonaws.com/uifaces/faces/twitter/olegpogodaev/128.jpg\"},\\n'\n          + '{\"id\":4,\"email\":\"eve.holt@reqres.in\",\"first_name\":\"Eve\",\"last_name\":\"Holt\",\"avatar\":\"https://s3.amazonaws.com/uifaces/faces/twitter/marcoramires/128.jpg\"},\\n'\n          + '{\"id\":5,\"email\":\"charles.morris@reqres.in\",\"first_name\":\"Charles\",\"last_name\":\"Morris\",\"avatar\":\"https://s3.amazonaws.com/uifaces/faces/twitter/stephenmoon/128.jpg\"},\\n'\n          + '{\"id\":6,\"email\":\"tracey.ramos@reqres.in\",\"first_name\":\"Tracey\",\"last_name\":\"Ramos\",\"avatar\":\"https://s3.amazonaws.com/uifaces/faces/twitter/bigmancho/128.jpg\"}],\\n'\n          + '\"ad\":{\"company\":\"StatusCode Weekly\",\"url\":\"http://statuscode.org/\",\"text\":\"A weekly newsletter focusing on software development, infrastructure, the server, performance, and the stack end of things.\"}}%\\n'\n        }\n      </SyntaxHighlighter>\n\n      <p>En <code>Windows Powershell</code> se puede hacer usando el comando <code>Invoke-WebRequest</code>:</p>\n\n      <SyntaxHighlighter language=\"shell\" style={docco}>\n        {\n          'Invoke-WebRequest -Uri https://reqres.in/api/users\\n'\n          + '\\n'\n          + '\\n'\n          + 'StatusCode        : 200\\n'\n          + 'StatusDescription : OK\\n'\n          + 'Content           : {\"page\":1,\"per_page\":6,\"total\":12,\"total_pages\":2,\"data\":[{\"id\":1,\"email\":\"george.bluth@reqres.in\",\\n'\n          + '                    \"first_name\":\"George\",\"last_name\":\"Bluth\",\"avatar\":\"https://s3.amazonaws.com/uifaces/faces/twitter/\\n'\n          + '                    ca...\\n'\n          + 'RawContent        : HTTP/1.1 200 OK\\n'\n          + '                    Connection: keep-alive\\n'\n          + '                    Access-Control-Allow-Origin: *\\n'\n          + '                    CF-Cache-Status: HIT\\n'\n          + '                    Age: 2954\\n'\n          + '                    cf-request-id: 0409dc416c0000f7dea9086200000001\\n'\n          + '                    Expect-CT: max-age=604800, report-uri=\"https:...\\n'\n          + 'Forms             : {}\\n'\n          + 'Headers           : {[Connection, keep-alive], [Access-Control-Allow-Origin, *], [CF-Cache-Status, HIT], [Age,\\n'\n          + '                    2954]...}\\n'\n          + 'Images            : {}\\n'\n          + 'InputFields       : {}\\n'\n          + 'Links             : {}\\n'\n          + 'ParsedHtml        : mshtml.HTMLDocumentClass\\n'\n          + 'RawContentLength  : 1221\\n'\n        }\n      </SyntaxHighlighter>\n\n      <p>Ahora supongamos que queremos probar crear un usuario, esto según la página se haría con la misma <code>url</code>, excepto\n      que debe hacerse con una petición <code>POST</code> y que el cuerpo o <code>body</code> de la petición debe tener los datos del usuario.</p>\n\n      <SyntaxHighlighter language=\"shell\" style={docco}>\n        {\n          'curl --header \"Content-Type: application/json\" --request POST --data \\'{\"name\":\"Oscar\",\"job\":\"data scientist\"}\\' https://reqres.in/api/users\\n'\n          + '{\"name\":\"Oscar\",\"job\":\"data scientist\",\"id\":\"61\",\"createdAt\":\"2020-07-19T18:13:35.277Z\"}% \\n'\n        }\n      </SyntaxHighlighter>\n\n      <SyntaxHighlighter language=\"shell\" style={docco}>\n        {\n          'Invoke-WebRequest -Uri https://reqres.in/api/users -Method POST -Body @{name=\"Oscar\";job=\"data scientist\"} \\n\\n'\n          + 'StatusCode        : 201\\n '\n          + 'StatusDescription : Created\\n '\n          + 'Content           : {\"name\":\"Oscar\",\"job\":\"data scientist\",\"id\":\"883\",\"createdAt\":\"2020-07-19T18:13:17.707Z\"}\\n '\n          + 'RawContent        : HTTP/1.1 201 Created\\n'\n          + '                    Connection: keep-alive\\n'\n          + '                    Access-Control-Allow-Origin: *\\n'\n          + '                    CF-Cache-Status: DYNAMIC\\n'\n          + '                    cf-request-id: 0409e0cf4c000074f3dd323200000001\\n '\n          + '                    Expect-CT: max-age=604800, report-uri=\"https://...\\n'\n          + 'Forms             : {}\\n'\n          + 'Headers           : {[Connection, keep - alive], [Access - Control - Allow - Origin, *], [CF - Cache - Status, DYNAMIC],\\n'\n          + '                    [cf-request-id, 0409e0cf4c000074f3dd323200000001]...}\\n '\n          + 'Images            : {}\\n'\n          + 'InputFields       : {}\\n'\n          + 'Links             : {}\\n'\n          + 'ParsedHtml        : mshtml.HTMLDocumentClass\\n'\n          + 'RawContentLength  : 89\\n'\n        }\n      </SyntaxHighlighter>\n\n      <h4>Ejemplo práctico</h4>\n      <p>Dejaré un par de enlaces con distintas APIs públicas para que jueguen. Les recomendaría probar unas\n      con autenticación y otras sin autenticación.</p>\n\n      <ul>\n        <li><a href=\"https://github.com/public-apis/public-apis\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/public-apis/public-apis</a></li>\n        <li><a href=\"https://punkapi.com/\" target=\"_blank\" rel=\"noopener noreferrer\">https://punkapi.com/</a></li>\n      </ul>\n\n      <p>Para los ejemplos propuestos, utilizaremos la <code>punkapi</code>, que básicamente es una API para comunicarse con una base de datos de\n      cervezas. Lo primero que debe hacerse al interactuar con una API es leer la documentación, para obtener información de las entidades que se\n      almacenan (tipos de datos) y de los puntos de acceso (<em>endpoints</em>) para enviar peticiones HTTP. En el caso de la API, la documentación puede\n      leerse en: <a href=\"https://punkapi.com/documentation/v2\" target=\"_blank\" rel=\"noopener noreferrer\">https://punkapi.com/documentation/v2</a></p>\n\n      <p>Supongamos que queremos comunicarnos con esta API y que por ahora sólo le daremos soporte a peticiones tipo <code>GET</code>. De la documentación\n      podemos extraer la <code>url</code> base de la API. Por otro lado, vemos que las API entrega como respuesta un JSON, por lo tanto nuestro código\n      en python debería empezar definiendo las variables pertinentes, e importando bibliotecas para trabajar con peticiones <code>HTTP</code> y\n      <code>json</code>:</p>\n\n\n      <SyntaxHighlighter language=\"python\" style={docco}>\n        {\n          'import requests\\n'\n          + 'import json\\n'\n          + '\\n'\n          + '\\n'\n          + '# Agregar otros métodos si se da soporte, ejemplo: {\"GET\", \"POST\", \"PUT\", \"DELETE\"}\\n'\n          + 'SUPPORTED_HTTP_REQ_METHODS = {\"GET\"}\\n'\n          + 'API_URL = \"https://api.punkapi.com/v2/beers\"\\n'\n        }\n      </SyntaxHighlighter>\n\n      <p>Ahora supongamos que queremos implementar una función que traiga los datos de una cerveza, dado el <code>id</code> de la cerveza. Podemos\n      ver de la documentación (es importante SIEMPRE leer la documentación de todo, sean API, sean libs python, sean comandos UNIX, etc.) que el\n      punto de acceso es <code>https://api.punkapi.com/v2/beers/:id</code>, donde <code>id</code> puede ser un entero, representando el identificador\n      de la cerveza, o si se quiere extraer una cerveza al azar se puede usar <code>random</code>. Supongamos que la firma de nuestra\n      función <code>request</code> tendrá <b>4</b> argumentos: <code>method</code>, <code>data</code>, <code>headers</code>, <code>id</code>. Por\n      defecto <code>data</code> y <code>headers</code> serán <code>None</code>, y el <code>id</code> tendrá valor <code>random</code>. Luego\n      podemos definir la siguiente función:</p>\n\n      <SyntaxHighlighter language=\"python\" style={docco}>\n        {\n          'def beer_request(method, data=None, headers=None, id=\"random\"):\\n'\n          + '    url = f\"{API_URL}/{id}\"\\n'\n          + '    method = method.upper()\\n'\n          + '    if method not in SUPPORTED_HTTP_REQ_METHODS:\\n'\n          + '        raise ValueError(\\n'\n          + '            f\"Provided method: {method} not in {SUPPORTED_HTTP_REQ_METHODS}\"\\n'\n          + '        )\\n'\n          + '    return requests.request(method, url, data=data, headers=headers)\\n'\n        }\n      </SyntaxHighlighter>\n\n      <p>Notar que en el ejemplo estamos usando <code>raise</code> para básicamente lanzar error si se pasa un método incorrecto (que no estemos dando soporte).\n      La función retornará un objeto de tipo <code>Response</code>. Luego podemos hacer una petición a la API, usando nuestra función:</p>\n\n      <SyntaxHighlighter language=\"python\" style={docco}>\n        {\n          '# GET\\n'\n          + 'response = beer_request(\"GET\")\\n'\n          + 'response.raise_for_status()\\n'\n          + 'beer = json.loads(response.text)\\n'\n          + 'print(beer)\\n'\n\n        }\n      </SyntaxHighlighter>\n\n      <p>Primero enviamos una petición <code>GET</code> al servidor. Luego analizamos la respuesta, el método <code>raise_for_status</code> básicamente\n      chequea el <code>status_code</code> de la respuesta y si es distinto de <code>20X</code>, se lanzará un error. Finalmente, como la respuesta es\n      un <code>JSON</code>, se extrae el texto de la respuesta y se carga en un diccionario en python, utilizando <code>json.loads</code>, que lo que\n      hace es, toma un <code>string</code> que represente un <code>JSON</code> y lo transforma a un diccionario en python:</p>\n\n      <SyntaxHighlighter language=\"shell\" style={docco}>\n        {\n          \"'[{'id': 26, 'name': 'Skull Candy', 'tagline': 'Pacific Hopped Amber Bitter.', 'first_brewed': '02/2010', 'description': 'The first beer that we brewed on our newly commissioned 5000 litre brewhouse in Fraserburgh 2009. A beer with the malt and body of an English bitter, but the heart and soul of vibrant citrus US hops.', 'image_url': 'https://images.punkapi.com/v2/keg.png', 'abv': 3.5, 'ibu': 33, 'target_fg': 1012, 'target_og': 1038, 'ebc': 50, 'srm': 25, 'ph': 4.4, 'attenuation_level': 68.4, 'volume': {'value': 20, 'unit': 'litres'}, 'boil_volume': {'value': 25, 'unit': 'litres'}, 'method': {'mash_temp': [{'temp': {'value': 65, 'unit': 'celsius'}, 'duration': 75}], 'fermentation': {'temp': {'value': 19, 'unit': 'celsius'}}, 'twist': None}, 'ingredients': {'malt': [{'name': 'Extra Pale', 'amount': {'value': 2.81, 'unit': 'kilograms'}}, {'name': 'Caramalt', 'amount': {'value': 0.63, 'unit': 'kilograms'}}, {'name': 'Crystal 120', 'amount': {'value': 0.31, 'unit': 'kilograms'}}], 'hops': [{'name': 'Cascade', 'amount': {'value': 25, 'unit': 'grams'}, 'add': 'start', 'attribute': 'bitter'}, {'name': 'Cascade', 'amount': {'value': 18.8, 'unit': 'grams'}, 'add': 'end', 'attribute': 'flavour'}, {'name': 'Centennial', 'amount': {'value': 18.8, 'unit': 'grams'}, 'add': 'end', 'attribute': 'flavour'}, {'name': 'Amarillo', 'amount': {'value': 25, 'unit': 'grams'}, 'add': 'end', 'attribute': 'flavour'}, {'name': 'Simcoe', 'amount': {'value': 31.3, 'unit': 'grams'}, 'add': 'end', 'attribute': 'flavour'}], 'yeast': 'Wyeast 1056 - American Ale™'}, 'food_pairing': ['Haggis bon bons', 'Rosemary and lemon roast chicken', 'Oatmeal and cranberry cookies'], 'brewers_tips': \\\"Make sure your hops are well broken up and mixed in when added to the kettle for aroma additions. The wort is not boiling so is not agitating the hops to allow mixing. If the hops aren't steeped properly in the wort you won't get the maximum flavour impact.\\\", 'contributed_by': 'Sam Mason <samjbmason>'}]\"\n        }\n      </SyntaxHighlighter>\n\n      <p>Ahora supongamos que queremos consultar todas las cervezas que existen en la base de datos del servidor, pero también nos gustaría filtrar\n      por algún criterio. De la documentación, se observa que pasándole <code>query params</code> a la <code>url</code> podemos filtrar en base a alguna\n      de las propiedades de la cerveza. Para implementar lo mencionado, podemos definir la siguiente función:</p>\n\n      <SyntaxHighlighter language=\"python\" style={docco}>\n        {\n          'def get_beers(query=None):\\n'\n          + '    url = API_URL\\n'\n          + '    return requests.get(url, params=query)\\n'\n\n        }\n      </SyntaxHighlighter>\n\n      <p>Notar que podríamos haber modificado la <code>url</code>, agregando query params vía: <code>?param1=value&param=2</code>, pero eso es un poco\n      sozo de hacer, además que la biblioteca <code>requests</code> maneja eso por nosotros. La forma correcta y elegante de hacerlo, es usando el\n      parámetro <code>params</code> de las requests, el cual llenará el query string por nosotros. Como ejemplo, supongamos que queremos las cervezas\n      con el IBU mayor que 90, para ello, de la documentación observamos que tenemos que usar el parámetro <code>ibu_gt</code>, además queremos contar\n      la cantidad de cervezas que cumplen este criterio, luego:</p>\n\n      <SyntaxHighlighter language=\"python\" style={docco}>\n        {\n          '# Cervezas con IBU > 90\\n'\n          + 'response = get_beers({\"ibu_gt\": \"90\"})\\n'\n          + 'response.raise_for_status()\\n'\n          + 'beers = json.loads(response.text)\\n'\n          + 'print(len(beers))\\n'\n          + 'print(beers[0])\\n'\n        }\n      </SyntaxHighlighter>\n\n      <p>Finalmente obtenemos de salida (por espacio sólo mostramos la primera cerveza de las 25 de la lista):</p>\n\n      <SyntaxHighlighter language=\"shell\" style={docco}>\n        {\n          \"25\\n\"\n          + \"{'id': 17, 'name': 'AB:06', 'tagline': 'Imperial Black IPA.', 'first_brewed': '04/2011', 'description': 'Our sixth Abstrakt, this imperial black IPA combined dark malts with a monumental triple dry-hop, using an all-star team of some of our favourite American hops. Roasty and resinous.', 'image_url': 'https://images.punkapi.com/v2/17.png', 'abv': 11.2, 'ibu': 150, 'target_fg': 1013, \\n\"\n          + \"'target_og': 1098, 'ebc': 70, 'srm': 35, 'ph': None, 'attenuation_level': 87, 'volume': {'value': 20, 'unit': 'litres'}, 'boil_volume': {'value': 25, 'unit': 'litres'}, 'method': {'mash_temp': \\n\"\n          + \"[{'temp': {'value': 65, 'unit': 'celsius'}, 'duration': 90}], 'fermentation': {'temp': {'value': 17, 'unit': 'celsius'}}, 'twist': 'White cane sugar: 150g at middle'}, 'ingredients': {'malt': [{'name': 'Pale Ale', 'amount': {'value': 6.13, 'unit': 'kilograms'}}, {'name': 'Crystal 150', 'amount': {'value': 0.25, 'unit': 'kilograms'}}, {'name': 'Caramalt', 'amount': {'value': 0.38, 'unit': 'kilograms'}}, {'name': 'Carafa Special Malt Type 1', 'amount': {'value': 0.13, 'unit': 'kilograms'}}, {'name': 'Carafa Special Malt Type 3', 'amount': {'value': 0.13, 'unit': 'kilograms'}}], 'hops': [{'name': 'Hop Extract', 'amount': {'value': 20, 'unit': 'grams'}, 'add': 'start', 'attribute': 'bitter'}, {'name': 'Amarillo', 'amount': {'value': 25, 'unit': 'grams'}, 'add': 'start', 'attribute': 'bitter'}, {'name': 'Chinook', 'amount': {'value': 25, 'unit': 'grams'}, 'add': 'end', 'attribute': 'flavour'}, {'name': 'Cascade', 'amount': {'value': 25, 'unit': 'grams'}, 'add': 'end', 'attribute': 'flavour'}, {'name': 'Centennial', 'amount': {'value': 25, 'unit': 'grams'}, 'add': 'end', 'attribute': 'flavour'}, {'name': 'Columbus', 'amount': {'value': 25, 'unit': 'grams'}, 'add': 'end', 'attribute': 'flavour'}, {'name': 'Chinook', 'amount': {'value': 25, 'unit': 'grams'}, 'add': 'dry hop', 'attribute': 'aroma'}, {'name': 'Cascade', 'amount': {'value': 25, 'unit': 'grams'}, 'add': 'dry hop', 'attribute': 'aroma'}, {'name': 'Centennial', 'amount': {'value': 25, 'unit': 'grams'}, 'add': 'dry hop', 'attribute': 'aroma'}, {'name': 'Columbus', 'amount': {'value': 25, 'unit': 'grams'}, 'add': 'dry hop', 'attribute': 'aroma'}, {'name': 'Amarillo', 'amount': {'value': 25, 'unit': 'grams'}, 'add': 'dry hop', 'attribute': 'aroma'}], 'yeast': 'Wyeast 1272 - American Ale II™'}, 'food_pairing': ['Coffee dusted venison loin', 'Memphis-style beef short ribs', 'Chocolate orange brownies'], 'brewers_tips': 'Boil down to desired OG (about 17 litres).', 'contributed_by': 'Sam Mason <samjbmason>'}\\n\"\n        }\n      </SyntaxHighlighter>\n\n      <h4>Ejemplo práctico con autenticación</h4>\n\n      <p>Para repasar, pueden probar jugar con APIs que requieran autenticación. Por ejemplo, vamos a la API de Zomato, la cual pueden encontrar\n      en el siguiente enlace: <a href=\"https://developers.zomato.com/api\" without rel=\"noopener noreferrer\" target=\"_blank\">API Zomato</a>. Pueden\n      registrarse para obtener una <code>api_key</code>. Luego pueden revisar la documentación de la API, para ver cómo se utiliza y qué\n      tipo de peticiones hacer. Supongamos que queremos utilizar el punto de acceso <code>/cities</code>. De la documentación, podemos ver\n      que bastaría enviar una petición <code>GET</code> a dicho punto de acceso, pero la petición en el <code>header</code> debe contener nuestra\n      API key. Además, la API soporta otros parámetros, supongamos que queremos buscar la ciudad <code>Santiago Chile</code>, para ello deberíamos\n      pasarle el parámetro <code>q</code> a la petición. Todo lo mencionado se puede implementar como sigue:</p>\n\n      <SyntaxHighlighter language=\"python\" style={docco}>\n        {\n          'import json\\n'\n          + 'import requests\\n'\n          + '\\n'\n          + '\\n'\n          + 'API_BASE_URL = \"https://developers.zomato.com/api/v2.1\"\\n'\n          + 'API_KEY = \"<AQUÍ PONER SU API KEY>\"\\n'\n          + '\\n'\n          + '\\n'\n          + 'def get_cities(headers=None, params=None):\\n'\n          + '    url = f\"{API_BASE_URL}/cities\"\\n'\n          + '    return requests.get(url, headers=headers, params=params)\\n'\n          + '\\n'\n          + '\\n'\n          + '# Notar como pasé la API_KEY a headers para la petición HTTP\\n'\n          + '# En otros casos podría ir en el payload (como data) o a veces como params, depende de la API\\n'\n          + 'response = get_cities(headers={\"user-key\": API_KEY}, params={\"q\": \"Santiago Chile\"})\\n'\n          + 'response.raise_for_status()\\n'\n          + 'cities = json.loads(response.text)\\n'\n          + 'print(cities) \\n'\n        }\n      </SyntaxHighlighter>\n\n      <p>Como resultado se obtiene: </p>\n\n      <SyntaxHighlighter language=\"shell\" style={docco}>\n        {\n          \"{'location_suggestions': [{'id': 83, 'name': 'Santiago', 'country_id': 42, 'country_name': 'Chile', \\n\"\n          + \"'country_flag_url': 'https://b.zmtcdn.com/images/countries/flags/country_42.png', 'should_experiment_with': 0, \\n\"\n          + \"'has_go_out_tab': 0, 'discovery_enabled': 0, 'has_new_ad_format': 0, 'is_state': 0, 'state_id': 0, 'state_name': '', \\n\"\n          + \"'state_code': ''}], 'status': 'success', 'has_more': 0, 'has_total': 0, 'user_has_addresses': True}\\n\"\n        }\n      </SyntaxHighlighter>\n\n\n      <h3>Tips para Desafíos</h3>\n      <h4>Ventas</h4>\n      <ol>\n        <li>Recuede cómo iterar pythónicamente en un diccionario y use la clave-valor de forma adecuada.</li>\n        <li>Idem al punto 1.</li>\n        <li>Puede generar el nuevo diccionario iterando sobre el diccionario original.</li>\n        <li>¿Recuerdan el ejemplo de la búsqueda lineal del material complementario para la semana 3?</li>\n        <li>Descomponga el problema de la siguiente forma: Defina cómo operará para un <em>quarter</em>. Luego puede generar\n        una lista de <em>quarters</em> y resolver el problema completo (¿cómo podría definir un quarter?)</li>\n        <li>Idem a los otros ejercicios. Como tip, para testear su función con el ejemplo del enunciado (notar que también\n        existen las comprensiones de <code>dict</code>):</li>\n        <SyntaxHighlighter language=\"python\" style={docco}>\n          {\n            'test = {\\n'\n            + '    key: value for key, value in zip(range(12), [20000] * 6 + [30000] * 3 + [40000] * 3)\\n'\n            + '}\\n'\n            + 'print(agrupar(test))\\n'\n          }\n        </SyntaxHighlighter>\n      </ol>\n      <h4>API</h4>\n      <p>Primero que todo, <b>olvídese</b> de los tips entregados en el enunciado (ya los reporté, tienen que modificarse).</p>\n      <ol>\n        <li>Cree una función que soporte los métodos dados por el enunciado y retorne el objeto <code>Response</code> (similar al ejemplo dado)</li>\n        <li>Chequee siempre el código de estado vía <code>raise_for_status</code></li>\n        <li>Para crear un usuario use método <code>POST</code>.</li>\n        <li>¿Para actualizar usuario qué método debe utilizar? pista: Empieza con P.</li>\n        <li>Idem a casos anteriores, usar método que empieza con D.</li>\n      </ol>\n    </div>\n  )\n}\n\nexport default withLayout(WeekFour);","import React from \"react\";\nimport withLayout from \"../../components/withLayout\";\nimport MathJax from 'react-mathjax-preview';\nimport SyntaxHighlighter from 'react-syntax-highlighter';\nimport { docco } from 'react-syntax-highlighter/dist/esm/styles/hljs';\nimport Image from 'react-bootstrap/Image'\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport { Link } from \"react-router-dom\";\n\n\nfunction WeekFive() {\n\n  return (\n    <div className='container'>\n      <h1 className='mt-5'>Estadística Univariada y Control de Flujo</h1>\n      <p className='lead'>\n        El módulo anterior, de <em>Introducción a la Programación en Python</em> tuvo como objetivo dar nociones de programación requeridas\n        a la hora de trabajar en el mundo tecnológico. Se vieron conceptos como utilizar un IDE (Visual Studio Code), utilizar una terminal,\n        variables y tipos en <code>Python</code>, ciclos y métodos, estructuras de datos, complejidad asintótica, una vista rápida a bibliotecas\n        utilizadas en ciencia de datos (ej. <code>pandas</code>, <code>numpy</code> y finalmente trabajar con fuentes de datos externas vía\n        peticiones HTTP (capítulo API). El objetivo de este módulo es trabajar con la matemática básica (estadística, probabilidad, etc.) requerida\n        para resolver problemas con datos. Por ello, de preferencia, nos alejaremos de <code>VSCode</code> y utilizaremos <code>Jupyter</code>.</p>\n\n      <h3>Empezando con Jupyter</h3>\n\n      <p>Para los que tengan instalado <code>Anaconda</code>, probablemente ya tengan instalado este paquete y pueden simplemente iniciar una sesión de jupyter\n      desde la <code>UI</code> de <code>Anaconda</code>. Los que no instalaron <code>Anaconda</code>, pueden instalar <code>jupyter</code> ejecutando\n      el comando <code>pip install jupyter</code>. Para iniciar jupyter: <code>jupyter notebook</code>, por defecto se iniciará un proceso en\n      el puerto <code>8888</code>. Si prefieren utilizar otro puerto, o ya están usando el puerto <code>8888</code>, pueden ejecutar\n      el comando <code>jupyter notebook --port=&lt;PUERTO&gt;</code>, por ejemplo, si queremos iniciar el proceso para que use el puerto <code>5000</code> pueden\n      ejecutar <code>jupyter notebook --port=5000</code>.</p>\n\n      <p>Una vez estén en su sesión de notebook, se les abrirá el navegador y los redireccionará a la <code>url</code> donde se inició el proceso\n      de Jupyter, en caso de que esto no ocurra automáticamente, se puede copiar y pegar el enlace en el navegador. Luego, para crear un notebook seguir\n      la siguiente imágen:</p>\n\n      <Row className=\"justify-content-md-center\">\n        <Col xs={12} sm={8} md={8}>\n          <Image src={process.env.PUBLIC_URL + '/imgs/notebook.png'} fluid />\n        </Col>\n      </Row>\n\n      <p><b>¿Por qué ahora usamos jupyter notebook, fue <code>VSCode</code> una pérdida de tiempo?</b> La respuesta es no, en general se utiliza\n      jupyter notebook en la fase de prototipado de la solución. Por ejemplo, documentar diferentes experimentos, analizar los datos de forma exploratoria\n      (estadística descriptiva, visualizaciones), probar diferentes enfoques. Finalmente, cuando se obtiene un modelo, viene la fase de ponerlo en marcha,\n      y para ello se requiere volver a escribir <code>scripts</code> o funciones. Ya en esta fase, idealmente usar un IDE, como por ejemplo\n      Visual Studio Code.</p>\n\n      <p>Puede usar sintaxis de <code>Markdown</code> para escribir mejores notas en su notebook de jupyter. Por otro lado, jupyter también\n      renderiza fórmulas en <code>Latex</code>, lo que puede ser útil a la hora de documentar experimentos, por ejemplo:</p>\n\n      <Row className=\"justify-content-md-center\">\n        <Col xs={12} sm={8} md={8}>\n          <Image src={process.env.PUBLIC_URL + '/imgs/markdown.png'} fluid />\n        </Col>\n      </Row>\n\n      <p>Para escribir <code>Markdown</code> debe escoger la opción, en la celda. Para replicar el ejemplo anterior:</p>\n\n      <SyntaxHighlighter language=\"markdown\" style={docco}>\n        {\n          '## Estadística Descriptiva\\n'\n          + '\\n'\n          + 'Para calcular la **media** de un conjunto de datos:\\n'\n          + '\\n'\n          + '$$\\\\bar{x} = \\\\frac{1}{n} \\\\sum_{i=1}^{n} x_i$$\\n'\n        }\n      </SyntaxHighlighter>\n\n      <p>Puede leer más sobre <code>Markdown</code> y <code>Latex</code> en los siguientes enlaces:</p>\n\n      <ul>\n        <li><a href=\"https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet\" target=\"_blank\" rel=\"noopener noreferrer\">Markdown</a></li>\n        <li><a href=\"https://www.latex-project.org/\" target=\"_blank\" rel=\"noopener noreferrer\">Latex</a></li>\n      </ul>\n\n      <h3>Estadística descriptiva</h3>\n\n      <p>En esta semana del módulo de fundamentos de data science trabajaremos con 3 métricas de estadística descriptiva:</p>\n\n      <ol>\n        <li>Media</li>\n        <li>Mediana</li>\n        <li>Desviación Estándar</li>\n      </ol>\n\n      <p>\n        <MathJax math={\n          `La media de un conjunto de datos discreto es el valor central, específicamente, la suma de los valores dividido por el número de \n          valores.\n          $$media = \\\\frac{1}{n} \\\\sum_{i=1}^{n} x_i$$\n          `} />\n      </p>\n\n      <p>\n        <MathJax math={\n          ` Fé de erratas a la fórmula de la mediana, la forma de calcularla es, ordenar las muestras. Luego, si se tienen $n$ muestras, \n          enúmeradas de $1$ a $n$, es decir $x_1, x_2, \\\\ldots, x_n$, la mediana se calcula como:\n          $$mediana = \\\\frac{1}{2} \\\\left( x_{\\\\lfloor (n+1)/2\\\\rfloor} + x_{\\\\lceil (n+1)/2\\\\rceil} \\\\right)$$\n          `} />\n      </p>\n\n      <p>\n        <MathJax math={\n          ` Supongamos que tenemos las siguientes observaciones de altura $h = (1, 3, 3, 5, 7)$, en este caso la mediana sería $3$, y aplicando \n          la fórmula, se tienen $5$ observaciones, por lo tanto se requiere $0.5 \\\\cdot (x_{3} + x_{3}) = x_{3} = 3$. Ahora supongamos que tenemos las \n          siguientes observaciones $h = (1, 2, 3, 4, 5, 6, 8, 9)$, en este caso el número de observaciones es $8$, número par. Por lo tanto según \n          la fórmula $0.5 \\\\cdot (x_{4} + x_{5}) = 0.5 \\\\cdot (4 + 5) = 4.5$. En el caso par, se consideran las muestras que caen en el medio, y se \n          calcula el punto medio entre ellas. Esto sigue la intuición de la definición de mediana, que es básicamente una medida que separa las \n          observaciones en una mitad inferior y una mitad superior. \n          `} />\n      </p>\n\n      <p>\n        <MathJax math={\n          ` La desviación estándar es una medida de cantidad de dispersión en un conjunto de valores. Un valor bajo de desviación estándar muestra \n          que los valores tienden a estar cerca del promedio, mientras que un valor alto indica que los valores tienden a exparcirse en un rango más \n          amplio de valores. Por ejemplo, consideremos dos distribuciones de valores $(50, 50)$, $(0, 100)$. Ambos tienen una media de 50, pero los \n          rangos de valores en la primera no se alejan del promedio, por lo tanto tienen 0 dispersión, mientras que en el segundo caso, la desviación \n          estándar es 50.\n\n          $$Desv.Std = \\\\sqrt{\\\\frac{1}{n} \\\\sum_{i=1}^{n} \\\\left( x_i - media \\\\right)^2}$$\n          `} />\n      </p>\n\n      <p>A continuación se muestra cómo calcular las estadísticas mencionadas usando python.</p>\n\n      <SyntaxHighlighter language=\"python\" style={docco}>\n        {\n          'import math\\n'\n          + 'import numpy as np\\n'\n          + 'import pandas as pd\\n'\n          + '\\n'\n          + '\\n'\n          + 'def mean(array):\\n'\n          + '    return sum(array) / len(array)\\n'\n          + '\\n'\n          + '\\n'\n          + 'def std(array):\\n'\n          + '    avg = mean(array)\\n'\n          + '    return math.sqrt(sum((xi - avg) ** 2 for xi in array) / (len(array)))\\n'\n          + '\\n'\n          + '\\n'\n          + 'def median(array):\\n'\n          + '    sorted_array = sorted(array)\\n'\n          + '\\n'\n          + '    # Indexacion empieza desde 0, por eso le resto 1\\n'\n          + '    n = len(array)\\n'\n          + '    return 0.5 * (\\n'\n          + '        sorted_array[math.floor((n + 1) / 2) - 1]\\n'\n          + '        + sorted_array[math.ceil((n + 1) / 2) - 1]\\n'\n          + '    )\\n'\n          + '\\n'\n          + '\\n'\n          + 'x1 = [1, 3, 3, 5, 7]\\n'\n          + 'x2 = [1, 2, 3, 4, 5, 6, 8, 9]\\n'\n          + '\\n'\n          + 'print(\"Usando las formulas y operaciones en python\")\\n'\n          + 'print(f\"x1; media: {mean(x1)}, mediana: {median(x1)}, desv std: {std(x1)}\")\\n'\n          + 'print(f\"x2; media: {mean(x2)}, mediana: {median(x2)}, desv std: {std(x2)}\")\\n'\n          + '\\n'\n          + 'np_x1 = np.array(x1)\\n'\n          + 'np_x2 = np.array(x2)\\n'\n          + '\\n'\n          + 'print(\"Usando numpy\")\\n'\n          + 'print(\\n'\n          + '    f\"x1; media: {np.mean(np_x1)}, mediana: {np.median(np_x1)}, desv std: {np.std(np_x1)}\"\\n'\n          + ')\\n'\n          + 'print(\\n'\n          + '    f\"x2; media: {np.mean(np_x2)}, mediana: {np.median(np_x2)}, desv std: {np.std(np_x2)}\"\\n'\n          + ')\\n'\n          + '\\n'\n          + 'df_x1 = pd.DataFrame({\"x1\": x1})\\n'\n          + 'df_x2 = pd.DataFrame({\"x2\": x2})\\n'\n          + '\\n'\n          + 'print(\"Usando pandas\")\\n'\n          + 'print(\\n'\n          + '    f\"x1; media: {df_x1.x1.mean()}, mediana: {df_x1.x1.median()}, desv std: {df_x1.x1.std()}\"\\n'\n          + ')\\n'\n          + 'print(\\n'\n          + '    f\"x1; media: {df_x2.x2.mean()}, mediana: {df_x2.x2.median()}, desv std: {df_x2.x2.std()}\"\\n'\n          + ')\\n'\n        }\n      </SyntaxHighlighter>\n\n      <p>Como resultado entrega:</p>\n      <SyntaxHighlighter language=\"shell\" style={docco}>\n        {\n          'Usando las formulas y operaciones en python\\n'\n          + 'x1; media: 3.8, mediana: 3.0, desv std: 2.039607805437114\\n'\n          + 'x2; media: 4.75, mediana: 4.5, desv std: 2.6339134382131846\\n'\n          + 'Usando numpy\\n'\n          + 'x1; media: 3.8, mediana: 3.0, desv std: 2.039607805437114\\n'\n          + 'x2; media: 4.75, mediana: 4.5, desv std: 2.6339134382131846\\n'\n          + 'Usando pandas\\n'\n          + 'x1; media: 3.8, mediana: 3.0, desv std: 2.280350850198276\\n'\n          + 'x2; media: 4.75, mediana: 4.5, desv std: 2.815771906346718\\n'\n        }\n      </SyntaxHighlighter>\n\n      <h3>Tips Desafíos</h3>\n      <h4>Introducción al ambiente de trabajo</h4>\n\n      <p>Para mantener un ambiente ordenado, les recomiendo usar un notebook de jupyter y usar una celda por cada ítem del desafío.</p>\n\n      <ol>\n        <li>Fé de erratas, la función print no retorna <code>string</code>, se refiere a imprimir en pantalla.</li>\n        <li>Piense en qué tipo de variable es adecuada para almacenar la información.</li>\n        <li>Para imprimir las variables, pueden usar <code>f-strings</code>, <code>format</code> o el método de su preferencia.</li>\n        <li>Utilizar los mensajes de error que arroja <code>python</code> para investigar la causa y arreglar el error.</li>\n        <li>Puede repasar dataframes usando el <Link to=\"/week3#pandas\">material complementario</Link> de la Semana 3.</li>\n      </ol>\n\n      <h4>Control de flujo</h4>\n\n      <ol>\n        <li>Pueden ver la <a href=\"https://numpy.org/doc/stable/reference/generated/numpy.linspace.html\" rel=\"noopener noreferrer\" target=\"_blank\">documentación</a> de <code>linspace</code>.</li>\n        <li>Inconveniente el fraseo, se refiere a mostrar los números pares del primer <code>array</code></li>\n        <li>Idealmente cuente cada una de las condiciones. Son cuatro condiciones, puede usar cuatro acumuladores</li>\n        <li>Recordar reglas respecto a identificadores para variables</li>\n        <li>Probablemente el objetivo de este ejercicio es ver si saben iterar sobre los elementos de la base de datos. Si puede hacerlo sin\n        usar ciclos, también lo consideraré bueno.</li>\n        <li>Idem al ejercicio 5, si lo puede hacer sin ciclos también se considerará bueno. Como dice el enunciado, idealmente calculen la media\n        y la desviación estándar y guarden cada una en una variable.</li>\n      </ol>\n\n    </div>\n  )\n}\n\nexport default withLayout(WeekFive);","import React from \"react\";\nimport withLayout from \"../../components/withLayout\";\nimport MathJax from 'react-mathjax-preview';\nimport SyntaxHighlighter from 'react-syntax-highlighter';\nimport { docco } from 'react-syntax-highlighter/dist/esm/styles/hljs';\nimport Image from 'react-bootstrap/Image'\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\n\n\nfunction WeekSix() {\n\n  return (\n    <div className='container'>\n      <h1 className='mt-5'>Probabilidades y Funciones</h1>\n      <p className='lead'>\n        Esta semana es de probabilidades y funciones. En este material complementario, planeo resumir un poco el contenido del curso\n        y hacer un par de fé de erratas a ciertos detalles. El que más me preocupa, es el que vi en el material de la plataforma donde\n        para una serie, llaman al método <code>value_counts</code> de la siguiente forma: <code>value_counts('%')</code>. Esto es confuso\n        y mala práctica. Lo que retorna son los valores de la serie normalizados por el total de valores. Hay dos cosas relevantes, la primera\n        es que los valores retornados <b>NO SON PORCENTAJES</b> (no cumplen la definición matemática de porcentaje). Y la segunda, es que\n        el primer argumento por defecto es un <code>booleano</code>, y la razón por la que dicha llamada funciona es porque hace un cast\n        al <code>string '%'</code> y este al no ser vacío, queda con el valor <code>True</code>. Esto es engañoso de leer, la forma correcta de llamar\n        a una función con parámetros con nombre, es explicitar los parámetros, en este caso: <code>value_counts(normalize=True)</code>. Si leen\n        la documentación, el argumento <code>normalize</code> por defecto es <code>False</code>, y lo que hace es dividir cada conteo por el\n        total (calculando proporciones respecto del total).</p>\n\n\n      <h3>Probabilidad</h3>\n\n      <p>En general, se habla de probabilidad en casos en que existe incertidumbre en una situación. Por ejemplo, si voy al doctor y recibo un tratamiento,\n      ¿Qué tan probable es que con dicho tratamiento me recupere? O por ejemplo, en un casino jugando black jack, ¿Cuál es la probabilidad de que me salga\n      black jack en la siguiente mesa?</p>\n\n      <p>Un <b>modelo probabilístico</b> es una descripción matemática de una situación incierta. Dicho modelo matemático contiene los siguientes\n      elementos:</p>\n\n      <MathJax math={\n        `<ul>\n            <li>El <b>espacio muestral $\\\\Omega$</b>, que es el conjunto de todos los posibles <b>resultados</b> de un experimento.</li>\n            <li>La <b>ley de probabilidad</b>, que asigna a un conjunto $A$ (también llamado <b>evento</b>) de posibiles resultados, un \n              número no negativo $P(A)$ (conocido como la <b>probabilidad</b> de $A$) y que codifica nuestro conocimiento o creencia sobre \n              qué tan posible es que $A$ ocurra.\n             </li>\n          </ul>\n          `} />\n\n      <p>La siguiente figura ilustra los elementos de un modelo probabilístico:</p>\n\n      <Row className=\"justify-content-md-center\">\n        <Col xs={12} sm={8} md={8}>\n          <Image src={process.env.PUBLIC_URL + '/imgs/modelo_probabilistico.png'} fluid />\n        </Col>\n      </Row>\n\n      <p>\n        <MathJax math={`\n        Todo modelo probabilístico involucra un proceso subyacente, el cual se le denomina <b>experimento</b>, y que producirá exactamente \n        uno de los muchos posibles <b>resultados</b>. El conjunto de todos los posibles resultados se llama <b>espacio muestral</b> del experimento, y \n        se denota $\\\\Omega$. Un subconjunto del espacio muestral, es decir, una colección de posibles resultados, se conoce como <b>evento</b>.`\n        } />\n      </p>\n\n      <p>\n        <MathJax math={`\n        La <b>ley de probabilidad</b> especifica la \"posibilidad\" de cualquier resultado, o cualquier conjunto de posibles resultados (evento). Esta \n        ley asigna a cada evento $A$, un número $P(A)$, llamado la <b>probabilidad</b> de $A$, la cual satisface los siguientes axiomas:\n        \n        <ol>\n          <li><b>(No negatividad)</b> $P(A) \\\\geq 0$, para todo evento $A$</li>\n          <li><b>(Aditividad)</b> Si $A$ y $B$ son dos eventos disjuntos, entonces la probabilidad de su union satisface:\n\n            $$P(A \\\\cup B) = P(A) + P(B)$$\n\n          Esto se puede generalizar a la union de más eventos.\n          </li>\n          <li><b>(Normalización)</b> La probabilidad del espacio muestral $\\\\Omega$ es igual a 1, es decir $P(\\\\Omega) = 1$</li>\n        </ol>\n        `\n        } />\n      </p>\n\n      <p>\n        <MathJax math={`\n        Consideremos el experimento de lanzar dos dados de 4 caras. Asumimos que los dados no están cargados, y con este supuesto queremos decir \n      que cada uno de los 16 posibles resultados ($\\\\left\\\\{ (i, j) \\\\| i, j = 1, 2, 3, 4\\\\right\\\\}$), cada uno tiene la misma probabilidad de \n      ocurrir $\\\\frac{1}{16}$. Algunos ejemplos:\n\n        <ul>\n          <li>$P(\\\\{ \\\\text{la suma de los dados es par}\\\\}) = \\\\frac{8}{16} = \\\\frac{1}{2}$</li>\n          <li>$P(\\\\{ \\\\text{la suma de los dados es impar}\\\\}) = \\\\frac{8}{16} = \\\\frac{1}{2}$</li>\n          <li>$P(\\\\{ \\\\text{El primer dado es igual al segundo}\\\\}) = \\\\frac{4}{16} = \\\\frac{1}{4}$</li>\n          <li>$P(\\\\{ \\\\text{El primer dado es mayor que el segundo}\\\\}) = \\\\frac{6}{16} = \\\\frac{3}{8}$</li>\n          <li>$P(\\\\{ \\\\text{Al menos un dado da 4}\\\\}) = \\\\frac{7}{16}$</li>\n        </ul>\n\n        El espacio muestral y algunos ejemplos de eventos se muestran en la siguiente figura:\n        `\n        } />\n      </p>\n\n      <Row className=\"justify-content-md-center\">\n        <Col xs={12} sm={8} md={8}>\n          <Image src={process.env.PUBLIC_URL + '/imgs/ejemplo_espacio.png'} fluid />\n        </Col>\n      </Row>\n\n      <h3>Probabilidad Condicional</h3>\n\n      <p>La probabilidad coondicional nos entrega una manera de razonar acerca los resultados de un experimento, basándonos en <b>información parcial</b>.\n      Algunos ejemplos de situaciones:</p>\n\n      <ul>\n        <li>En un experimento de lanzamiento consecutivo de dos dados, nos dicen que la suma es 9. ¿Qué tan posible es que el primer dado haya sido un 6?</li>\n        <li>¿Qué tan probable es que una persona tiene cierta enfermedad dado un test médico que salió negativo?</li>\n        <li>Un cliente está usando un la versión gratuita de servicio con cierta frecuencia. ¿Qué tan probable es que acepte una oferta de suscripción\n        premium?</li>\n      </ul>\n\n      <p>\n        <MathJax math={\n          `\n          Siendo más precisos, dado un experimento, su espacio muestral correspondiente y su ley de probabilidad, supongamos que el resultado se encuentra \n          dentro de algun evento $B$ dado. Deseamos cuantificar la posibilidad que el resultado pertenece también a otro evento $A$. Por lo tanto, construimos \n          una nueva ley de probabilidad que considera el conocimiento disponible: Una ley de probabilidad que para cualquier evento $A$, especifica la \n          <b>probabilidad condicional de $A$ dado $B$</b>, y se denota como $P\\\\left(A\\\\mid B\\\\right)$.\n          `\n        } />\n      </p>\n\n      <p>\n        <MathJax math={\n          `\n          Por otro lado, nos gustaría que las probabilidades condicionales $P\\\\left(A\\\\mid B\\\\right)$ de diferentes eventos $A$, constituyeran una \n          ley de probabilidad que satisfaga todos los axiomas de probabilidad. Este tipo de probabilidades también deben ser consistentes con la intuición \n          en casos especiales, por ejemplo, cuando todos los posibles resultados del experimento son igualmente posibles. Por ejemplo, supongamos que los \n          6 resultados del lanzamiento de un dado de 6 caras son igualmente probables. Si nos dijeran que el resultado fue par, nos quedan sólo 3 posibles \n          resultados, 2, 4, y 6. Estos resultados en principio tenían la misma probabilidad, por lo tanto ahora que sabemos que el número fue par, debiesen \n          ser igualmente probables. Así, es razonable pensar:\n\n          $$P\\\\left(\\\\text{el resultado es 6}\\\\mid \\\\text{el resultado es par}\\\\right) = \\\\frac{1}{3}$$\n\n          Generalizando esta intuición, la definición de probabilidad condicional es:\n\n          $$P\\\\left(A\\\\mid B\\\\right) = \\\\frac{P(A \\\\cap B)}{P(B)}$$\n\n          donde asumimos que $P(B) > 0$; la probabilidad condicional es indefinida si el evento condicionante tiene probabilidad cero. \n          `\n        } />\n      </p>\n\n      <p>\n        <MathJax math={\n          `\n          Dado que $P(A) \\\\geq 0$ y $P(B) > 0$, esta ley de probabilidad satisface el axioma de no negatividad. El axioma de normalización también \n          se satisface, pues:\n\n          $$P\\\\left(\\\\Omega \\\\mid B\\\\right) = \\\\frac{P\\\\left( \\\\Omega \\\\cap B\\\\right)}{P(B)} = \\\\frac{P(B)}{P(B)} = 1$$\n\n          Y el axioma de aditivdad también se satisface, para cualquier par de eventos disjuntos $A_1$ y $A_2$:\n\n          $$P\\\\left(A_1 \\\\cup A_2 \\\\mid B\\\\right) = \\\\frac{P\\\\left(\\\\left(A_1 \\\\cup A_2 \\\\right) \\\\cap B\\\\right)}{P(B)}$$\n          \n          $$ = \\\\frac{P\\\\left(\\\\left(A_1 \\\\cap B \\\\right) \\\\cup \\\\left(A_2\\\\cap B\\\\right)\\\\right)}{P(B)}$$\n\n          $$ = \\\\frac{P\\\\left(A_1 \\\\cap B \\\\right) + \\\\left(A_2\\\\cap B\\\\right)}{P(B)}$$\n\n          $$ = \\\\frac{P\\\\left(A_1 \\\\cap B \\\\right)}{P(B)} + \\\\frac{\\\\left(A_2\\\\cap B\\\\right)}{P(B)}$$\n\n          $$ = P\\\\left(A_1 \\\\mid B\\\\right) + P\\\\left(A_2 \\\\mid B\\\\right)$$\n          `\n        } />\n      </p>\n\n      <p>\n        <MathJax math={\n          `\n          Consideremos nuevamente el experimento de dos lanzamientos de dados de 4 caras, donde los 16 resultados posibles tienen la misma probabilidad.\n          Supongamos que queremos determinar la probabilidad $P\\\\left(A \\\\mid B\\\\right)$ donde:\n\n          $$A = \\\\left\\\\{max(X, Y) = m\\\\right\\\\}, \\\\quad B = \\\\left\\\\{min(X, Y) = 2\\\\right\\\\},$$\n\n          y $m$ puede tomar cualquiera de los valores 1, 2, 3, 4.\n          `\n        } />\n      </p>\n\n      <Row className=\"justify-content-md-center\">\n        <Col xs={12} sm={8} md={8}>\n          <Image src={process.env.PUBLIC_URL + '/imgs/ejemplo_condicional.png'} fluid />\n        </Col>\n      </Row>\n\n      <p>\n        <MathJax math={\n          `\n          En la imagen se muestra el espacio muestral de un experimento que involucra dos lanzamientos de dados de 4 caras. El evento \n          condicionante $B = \\\\left\\\\{min(X, Y) = 2\\\\right\\\\}$ es el conjunto sombreado en la figura. El \n          evento $A = \\\\left\\\\{max(X, Y) = m\\\\right\\\\}$ comparte con $B$ dos elementos si $m = 3$ o $m = 4$, un elemento si $m = 2$, y ningún \n          elemento si $m = 1$. Por lo tanto tenemos:\n\n          $$\n          P (\\\\left\\\\{max(X, Y) = m\\\\right\\\\} \\\\mid B)=\n            \\\\left\\\\{\n              \\\\begin{array}{ll}\n                2/5  & \\\\mbox{si } m = 3 \\\\text{ o } m = 4 \\\\\\\\\n                1/5 & \\\\mbox{si } m = 2 \\\\\\\\\n                0 & \\\\mbox{si } m = 1\n              \\\\end{array}\n            \\\\right.$$\n          `\n        } />\n      </p>\n\n      <h3>Distintos enfoques a la estadística</h3>\n\n      <p>\n        En el campo de la estadística hay dos prominentes escuelas de pensamiento, con visiones opuestas: la <b>Bayesiana</b> y la <b>clásica</b> (\n        también llamada <b>frecuentista</b>). Su diferencia fundamental está relacionada con la naturaleza de modelos desconocidos o variables. En una\n        visión Bayesiana, estos modelos se tratan como variables aleatorias (tema que veremos más adelante) con distribuciones conocidas. En la visión\n        clásica, estos modelos/variables se tratan como cantidades determinísticas que se desconocen. En fin, es un tema prácticamente filosófico, pero\n        en términos prácticos, los modelos Bayesianos solían ser intratables computacionalmente, ahora con los avances en computación y en\n        semiconductores (procesadores), muchas investigaciones recientes se enfocan en hacer métodos Bayesianos que puedan ser usados en la práctica. Pueden\n        leer este <a href=\"http://jakevdp.github.io/blog/2014/03/11/frequentism-and-bayesianism-a-practical-intro/\" target=\"_blank\" rel=\"noopener noreferrer\">interesante artículo</a>.\n      </p>\n\n      <h3>Tips para desafío Jueves</h3>\n\n      <ol>\n        <li>Pueden usar la información de la primera semana de éste módulo. Para docstrings\n        ver <a href=\"https://dpalmasan.github.io/homepage/#/python_misc\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\">\n            Intro Python Misc.\n        </a></li>\n        <li>\n          En este caso, recomiendo ver este fragmento de código modificado (fé de erratas al que sale en el enunciado):\n\n        <SyntaxHighlighter language=\"python\" style={docco}>\n            {\n              'continentes = df[\"continent\"].unique()\\n'\n              + '\\n'\n              + '# Es mejor pre-asignar memoria, podemos usar numpy\\n'\n              + 'promedios = np.zeros(len(continentes))\\n'\n              + 'desviaciones = np.zeros(len(continentes))\\n'\n              + '\\n'\n              + '# Es mejor iterar por nombre de continente, ya que \\n'\n              + '# no tiene sentido usar memoria gigantezca para almacenar\\n'\n              + '# una lista de DataFrames e iterar sobre ellos\\n'\n              + 'for i, continente in enumerate(continentes):\\n'\n              + '    promedios[i] = df[df[\"continent\"] == continente][\"goles_favor\"].mean()\\n'\n              + '    desviaciones[i] = df[df[\"continent\"] == continente][\"goles_favor\"].std()\\n'\n              + '    \\n'\n              + '    \\n'\n              + 'result = pd.DataFrame({\\n'\n              + '    \"continente\": continentes,\\n'\n              + '    \"promedio\": promedios,\\n'\n              + '    \"desv\": desviaciones\\n'\n              + '})\\n'\n              + 'result\\n'\n            }\n          </SyntaxHighlighter>\n\n          Para la función a implementar, pueden tomar como base la siguiente definición (modifiqué la firma):\n\n          <SyntaxHighlighter language=\"python\" style={docco}>\n            {\n              'def analizar(df, grupo, variable):\\n'\n              + '    \"\"\"Analiza un dataframe y retorna promedios y desviaciones.\\n'\n              + '\\n'\n              + '    :param df: DataFrame a analizar\\n'\n              + '    :type df: pd.DataFrame\\n'\n              + '    :param grupo: Categoría para agrupar (ej. continente)\\n'\n              + '    :type grupo: string\\n'\n              + '    :param variable: Columna a analizar\\n'\n              + '    :type variable: string\\n'\n              + '    \"\"\"\\n'\n              + '    # Remover este pass e implementar función\\n'\n              + '    pass\\n'\n            }\n          </SyntaxHighlighter>\n\n          Habrá una bonificación de 1 punto si leen la documentación de <code>groupby</code> de <code>pandas</code> e implementan\n          el ejercicio de esa forma (<a href=\"https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.groupby.html\" target=\"_blank\" rel=\"noopener noreferrer\">ver documentación</a>)\n\n        </li>\n        <li>Para verificar su función, pruebe aplicandola un número grande de veces (ej. <code>1000</code>). Como son dos elementos y\n        la función <code>np.random.choice</code> tiene garantías de ser unfiromemente distribuída, la probabilidad debiese ser la\n        misma para ambos elementos en el largo plazo (gran cantidad de experimentos), es decir 0.5.</li>\n        <li>Para la semilla usar <code>np.random.seed(semilla)</code> donde <code>semilla</code> tiene el valor que quieren utilizar.</li>\n      </ol>\n    </div>\n  )\n}\n\nexport default withLayout(WeekSix);","import React from \"react\";\nimport withLayout from \"../../components/withLayout\";\nimport MathJax from 'react-mathjax-preview';\nimport SyntaxHighlighter from 'react-syntax-highlighter';\nimport { docco } from 'react-syntax-highlighter/dist/esm/styles/hljs';\nimport Image from 'react-bootstrap/Image'\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\n\n\nfunction WeekSeven() {\n\n  return (\n    <div className='container'>\n      <h1 className='mt-5'>Variables Aleatorias y Gráficos</h1>\n      <p className='lead'>\n        En este material complementario, se darán algunas nociones básicas de variables aleatorias discretas y continuas. También se verán\n        ejemplos de gráficos típicos utilizados en análisis exploratorio de datos, tales como histogramas, dotplots, gráficos de barra, entre otros.\n        Cabe destacar que en general teoría de probabilidad da para un curso completo, y por lo tanto, sólo se entregnan nociones fundamentales. El\n        lector puede profundizar en algunos temas en caso de que quiera saber más (ej. Yo recomendaría leer sobre valor esperado y varianza de\n        una variable aleatoria).\n      </p>\n\n\n      <h3>Variables Aleatorias</h3>\n\n      <p>Dado un experimento y su correspondiente conjunto de resultados posibles (espacio muestral), una variable aleatoria\n      asoocia un número particular a cada resultado, el cual llamamos <b>valor</b> de la variable aleatoria.\n      Matemáticamente, <b>una variable aleatoria es una función que mapea el resultado de un experimento a un valor real</b>.</p>\n\n      <Row className=\"justify-content-md-center\">\n        <Col xs={12} sm={8} md={8}>\n          <Image src={process.env.PUBLIC_URL + '/imgs/discrete_random_variable.png'} fluid />\n        </Col>\n      </Row>\n\n      <p>\n        <MathJax math={`\n        En la figura se muestra un ejemplo de variable aleatoria. Por ejemplo si se tiene el experimento de lanzar dos dados de 4 caras, \n      donde los lanzamientos los representamos como los pares $(x, y)$, entonces se podría definir como variable aleatoria $X = max(x, y)$, por \n      ejemplo en el caso en que el resultado del experimento sea $(4, 1)$, entonces la variable $X$ tomaría el valor 4.`\n        } />\n      </p>\n\n      <p>Otro ejemplo, en un experimento que involucre una secuencia de 5 lanzamientos de una moneda, el número de caras en la secuencia podría\n      ser una variable aleatoria. La secuencia en sí (ej. <code>HHTHT</code>) no es una variable aleatoria, ya que no tiene un valor numérico explícito.</p>\n\n      <h4>Conceptos principales relacionados a Variables Aleatorias</h4>\n\n      <p>Considerando un modelo probabilístico de un experimento:</p>\n      <ul>\n        <li>Una <b>variable aleatoria</b> es una función con valores reales de los resultados de un experimento.</li>\n        <li>Una <b>función de una variable aleatoria</b> define otra variable aleatoria.</li>\n        <li>Podemos asociar a cada variable aleatoria ciertas \"tendencias\" de interés, por ejemplo el <b>promedio</b> y la <b>varianza</b>.</li>\n        <li>Una variable aleatoria puede estar <b>condicionada</b> por un evento o por otra variable aleatoria.</li>\n        <li>Existe una noción de <b>independencia</b> de una variable aleatoria con respecto a un evento u otra variable aleatoria.</li>\n      </ul>\n\n      <p>Una variable aleatoria, se dice que es <b>discreta</b>, si su rango (el conjunto de valores que puede tomar) es finito o\n      infinito contable (por ejemplo, los números naturales son contables, pues puedo enumerarlos, sin embargo los números realos no porque\n      ¿qué número viene después del 0?). En los ejemplos anteriores, los valores que pueden tomar las variables definidas son limitados:\n      en el caso de la secuencia de 5 lanzamientos de moneda, la variable cantidad de caras, puede tomar los valores <code>0, 1, 2, 3, 4, 5</code>. En\n      el caso del lanzamiento de los dos dados y la variable <code>max(x, y)</code>, esta puede tomar los valores <code>1, 2, 3, 4</code>.</p>\n\n      <p>\n        <MathJax math={`\n        La forma más importante de caracterizar una variable aleatoria, es a través de las probabilidades de los valores que puede tomar. Para una \n        variable discreta $X$, estos valores se capturan con la <b>función masa de probabilidad</b> de $X$, denotada como $p_X$. En particular, si $x$ es \n        un número real, la probabilidad de masa de $x$, denotada como $p_X(x)$, es la probabilidad del evento $\\\\left\\\\{X = x\\\\right\\\\}$ que consiste \n        en todos los resultados llevan a la variable $X$ tomar el valor $x$\n        \n        $$p_X(x) = P\\\\left(\\\\left\\\\{X = x\\\\right\\\\}\\\\right)$$\n        `\n        } />\n      </p>\n\n      <p>\n        <MathJax math={`\n          Consideremos el ejemplo de lanzar dos monedas, y consideremos $X$ como la cantidad de caras obtenidas. Observamos que la variable puede \n          tomar los valores $0, 1, 2$, luego la distribución de masa de probabilidad de $X$ es:\n\n          $$\n          p_X(x)=\n            \\\\left\\\\{\n              \\\\begin{array}{ll}\n                1/4  & \\\\mbox{si } x = 0 \\\\text{ o } x = 2 \\\\\\\\\n                1/2 & \\\\mbox{si } x = 1 \\\\\\\\\n                0 & \\\\mbox{en cualquier otro caso }\n              \\\\end{array}\n            \\\\right.$$\n\n          Como ejercicio para el lector, pueden calcular la función de masa de probabilidad para el experimento del lanzamiento de dos dados con \n          $X = max(x, y)$.\n\n          Se debe notar que se cumple:\n\n          $$\\\\sum_{x} p_X(x) = 1$$\n\n          Donde en la suma anterior, $x$ puede tomar todos los posibles valores de $X$. Esto es una consecuencia de los axiomas de aditividad y \n          normalización.\n        `\n        } />\n      </p>\n\n      <p>\n        <MathJax math={`\n          Un ejemplo importante de variable aleatoria, es la <b>variable aleatoria de Bernoulli</b>. Esta variable considera el lanzamiento \n          de una moneda, cuya probabilidad de cara es $p$, y cruz $1 - p$. Esta variable toma dos valores, 1 o 0, dependiendo del resultado \n          del lanzamiento. La distribución de probabilidad de masa es:\n\n          $$\n          p_X(x)=\n            \\\\left\\\\{\n              \\\\begin{array}{ll}\n                p  & \\\\mbox{si } x = 1 \\\\\\\\\n                1 - p & \\\\mbox{si } x = 0 \\\\\\\\\n              \\\\end{array}\n            \\\\right.$$\n\n          Pese a su simplicidad, la variable de Bernoulli es muy importante. En la práctica, se utiliza para modelar situaciones probabilísticas \n          con dos posibles resultados, por ejemplo:\n\n          <ul>\n            <li>Cliente compra o no compra producto o servicio.</li>\n            <li>El estado de un teléfono en un tiempo dado es disponible u ocupado.</li>\n            <li>La preferencia de una persona puede ser a favor o en contra de un candidato político.</li>\n          </ul>\n\n          Otros ejemplos de variables aleatorias típicas usadas son: Binomial, Geométrica y de Poisson.\n        `\n        } />\n      </p>\n\n      <h4>Esperanza y varianza de una variable aleatoria</h4>\n      <p>\n        <MathJax math={`\n          Usualmente es deseable, resumir la información de una variable aleatoria en una sola magnitud, en lugar de varios números asociados \n          a las probabilidades de los valores posibles de la variable. Esto se logra mediante la <b>esperanza</b> de $X$, que es un promedio \n          ponderado (a través de probabilidades) de los posibles valores de $X$.\n\n          $$E[X] = \\\\sum_x {xp_X(x)} $$\n\n          Una intuición de esta medida es pensar en la esperanza de una variable aleatoria como el centro de gravedad o centro de masa de \n          la función de probabilidad de masa.\n\n          Otra medida importante asociada a una variable aleatoria $X$ es la <b>varianza</b> de $X$, que se define como la esperanza de la\n          variable aleatoria $(X - E[X])^2$, es decir:\n\n          $$var(X) = E\\\\left[(X - E[X])^2\\\\right]$$\n\n          La interpretación es la misma que vimos en la semana 1, a diferencia que ahora conocemos el modelo probabilístico de la variable \n          aleatoria.\n        `\n        } />\n      </p>\n\n      <p>\n        Es bastante común que existan variables aleatorias con un rango continuo de posibles valores, algunos ejemplos: velocidad de un vehículo\n        en una carretera, estatura de un grupo de interés, etc. Además, las variables continuas permiten usar un conjunto de herramientas de\n        cálculo que usualmente permiten análisis que no son posibles de realizar en un modelo discreto. Finalmente, todos los conceptos y métodos\n        vistos sobre variables aleatorias discretas tienen una contraparte continua.\n      </p>\n\n\n      <p>\n        <MathJax math={`\n          Una variable $X$ se dice que es <b>continua</b> si existe una función no negativa $f_X$, llamada <b>función de densidad de probabilidad</b> de \n          $X$, tal que:\n\n          $$P(X \\\\in B) = \\\\int_B {f_X(x)dx}$$\n\n          y que puede ser interpretada como el área bajo la curva del gráfico de la función de densidad de probabilidad. Por otro lado, la función \n          $f_X(x) \\\\geq 0$ para todo $x$ y $\\\\int_{-\\\\infty}^{\\\\infty} {f_X(x)dx} = 1$ (axioma de normalización). También se pueden definir las medidas \n          de esperanza y varianza en una variable continua $X$:\n\n          $$E[X] = \\\\int_{-\\\\infty}^{\\\\infty} {xf_X(x)dx}$$\n\n          $$var(X) = E\\\\left[(X - E[X])^2\\\\right] = \\\\int_{-\\\\infty}^{\\\\infty} {\\\\left(x - E[x]\\\\right)^2f_X(x)dx}$$\n        `\n        } />\n      </p>\n\n      <p>\n        <MathJax math={`\n          Un ejemplo bastante usado de variable aleatoria continua son las variables aleatorias normales. Una variable aleatoria $X$ se dice que \n          es <b>normal</b> o <b>Gaussiana</b> si tiene una función de densidad de probabilidad de la forma:\n\n          $$f_X(x) = \\\\frac{1}{\\\\sqrt{2 \\\\pi \\\\sigma}} e^{-(x - \\\\mu)^2/2\\\\sigma^2}$$\n\n          La esperanza y la varianza de X se pueden calcular, encontrándose que: $E[X] = \\\\mu$ y $var(X) = \\\\sigma^2$. En general, se dice que la \n          distribución normal está parametrizada por $\\\\mu$ y por $\\\\sigma^2$. Un caso particular de la variable aleatoria normal es la variable aleatoria \n          normal estandarizada, en el que $\\\\mu = 0$ y $var(X) = 1$. Este tipo de variable se usa frecuente mente en procesamiento de señales, u en otros \n          fenómenos donde se quiere modelar el ruido de una señal.\n        `\n        } />\n      </p>\n\n      <h3>Visualización de variables (Gráficos con python)</h3>\n\n      <h4>Histogramas</h4>\n\n      <p>Un histograma nos entrega una interpretación visual de datos numéricos, indicando el número de observaciones que poseen valores en\n      un determinado rango. Estos rangos de valores se conocen como clases o bins. La frecuencia de datos que caen en cada bin se ilustra mediante\n      una barra vertical. Mientras más alta sea la barra, mayor es la cantidad de datos de un bin. Una aplicación bastante usada es determinar si\n      una variable \"se parece\" o puede aproximarse a una variable normal, para ello lo que se hace es normalizar el histograma (axioma de normalización)\n      dividiendo por <code>total_obs*ancho_bin</code>. A continuación se muestran algunos ejemplos.</p>\n\n      <p>Primero cargamos el conjunto de datos (disponible en la plataforma)</p>\n\n      <SyntaxHighlighter language=\"python\" style={docco}>\n        {\n          'import pandas as pd\\n'\n          + '\\n'\n          + '\\n'\n          + 'df = pd.read_csv(\"qog_std_cs_jan18.csv\")\\n'\n          + 'df.head()\\n'\n        }\n      </SyntaxHighlighter>\n\n      <p>Graficamos histograma, hay varias formas de hacerlo, por ahora lo haremos con la biblioteca <code>seaborn</code>:</p>\n\n      <SyntaxHighlighter language=\"python\" style={docco}>\n        {\n          '%matplotlib inline\\n'\n          + '\\n'\n          + 'import seaborn as sns\\n'\n          + '\\n'\n          + '# United nations development program (Human development index)\\n'\n          + 'undp_hdi_notna = df[\"undp_hdi\"].dropna()\\n'\n          + '\\n'\n          + 'sns.distplot(undp_hdi_notna, bins=20, kde=False)\\n'\n        }\n      </SyntaxHighlighter>\n\n      <Row className=\"justify-content-md-center\">\n        <Col xs={12} sm={8} md={8}>\n          <Image src={process.env.PUBLIC_URL + '/imgs/hist.png'} fluid />\n        </Col>\n      </Row>\n\n      <p>Veamos qué tanto se acerca la distribución de los datos a una distribución normal. Para ello normalizamos el histograma, y graficamos la\n      función de densidad de probabilidad de una variable aleatoria normal. Podemos usar como aproximación el promedio y la desviación estándar\n      de la muestra. La función de densidad de probabilidad normal viene implementada en la biblioteca <code>scipy</code>.</p>\n\n      <SyntaxHighlighter language=\"python\" style={docco}>\n        {\n          'from scipy.stats import norm\\n'\n          + 'import numpy as np\\n'\n          + 'import matplotlib.pyplot as plt\\n'\n          + '\\n'\n          + 'x = np.linspace(0, 1.4, 100)\\n'\n          + '\\n'\n          + 'sns.distplot(undp_hdi_notna, bins=20, kde=False, norm_hist=True)\\n'\n          + '\\n'\n          + '# Graficar histograma normalizado (como función de densidad de probabilidad)\\n'\n          + '# Se normaliza para cumplir el axioma de normalización, esto se logra \\n'\n          + '# Dividiendo el conteo de cada bin por la cantidad de muestras*largo_bin\\n'\n          + 'plt.plot(x, norm.pdf(x, undp_hdi_notna.mean(), undp_hdi_notna.std()), \"r\")\\n'\n        }\n      </SyntaxHighlighter>\n\n      <Row className=\"justify-content-md-center\">\n        <Col xs={12} sm={8} md={8}>\n          <Image src={process.env.PUBLIC_URL + '/imgs/hist_dist.png'} fluid />\n        </Col>\n      </Row>\n\n      <p>Es interesante también explorar un poco más la variable aleatoria normal. Veamos qué ocurre al variar los parámetros de la media\n      y la desviación estándar. También grafiquemos la función acumulada de densidad (que en el infinito debe ser igual a 1, ya que es el área bajo\n      la curva de la función de densidad de probabilidad):</p>\n\n      <SyntaxHighlighter language=\"python\" style={docco}>\n        {\n          'x = np.linspace(-10, 10, num=500)\\n'\n          + '\\n'\n          + '# Gráficos\\n'\n          + 'fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 7))\\n'\n          + 'fig.suptitle(r\"Distribuciones normales para distintos valores de $\\\\mu$ y $\\\\sigma$\")\\n'\n          + 'ax1.plot(x, norm.pdf(x, 0, 1), \"r\")\\n'\n          + 'ax1.plot(x, norm.pdf(x, -1, 2), \"g\")\\n'\n          + 'ax1.plot(x, norm.pdf(x, 2, 5), \"b\")\\n'\n          + 'ax1.legend((r\"$\\\\mu = 0, \\\\sigma = 1$\", r\"$\\\\mu = -1, \\\\sigma = 2$\", r\"$\\\\mu = 2, \\\\sigma = 5$\"))\\n'\n          + 'ax2.plot(x, norm.cdf(x, 0, 1), \"r\")\\n'\n          + 'ax2.plot(x, norm.cdf(x, -1, 2), \"g\")\\n'\n          + 'ax2.plot(x, norm.cdf(x, 2, 4), \"b\")\\n'\n          + 'ax2.legend((r\"$\\\\mu = 0, \\\\sigma = 1$\", r\"$\\\\mu = -1, \\\\sigma = 2$\", r\"$\\\\mu = 2, \\\\sigma = 5$\"))\\n'\n        }\n      </SyntaxHighlighter>\n\n      <Row className=\"justify-content-md-center\">\n        <Col xs={12} sm={8} md={8}>\n          <Image src={process.env.PUBLIC_URL + '/imgs/pdf_cdf.png'} fluid />\n        </Col>\n      </Row>\n\n      <p>En el material de la plataforma también se ven otros tipos de gráficos útiles, como el de barra, o el gráfico de torta.</p>\n\n      <h3>Tips Desafíos de la semana</h3>\n\n      <h4>Desafío Martes</h4>\n\n      <ol>\n        <li>Para extraer una muestra aleatoria, pueden usar el método <code>sample</code> de los dataframe de pandas.</li>\n        <li>Pueden usar <code>describe</code> para las estadísticas descriptivas.</li>\n        <li>Pueden usar <code>isnull</code></li>\n        <li>Hay varias formas de hacer este ejercicio, pero en todas deben combinar uso de bibliotecas para gráficos.</li>\n        <li>El uso del término \"dotplot\" está mal empleado. Deben hacer un gráfico como el que sale en las lecturas (usando simplemente plot)</li>\n        <li>El enunciado dice exactamente lo que hay que hacer.</li>\n      </ol>\n    </div>\n  )\n}\n\nexport default withLayout(WeekSeven);","import React from \"react\";\nimport Button from 'react-bootstrap/Button';\n\nclass SolutionButton extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      toggle: false\n    };\n\n    this.setToggle = this.setToggle.bind(this);\n  }\n\n  setToggle() {\n    this.setState({ toggle: !this.state.toggle })\n  }\n\n  render() {\n    const { toggle } = this.state;\n    return (\n      <>\n        <Button variant=\"primary\" onClick={this.setToggle}>\n          {(toggle) ? \"Ocultar solución\" : \"Mostrar Solución\"}\n        </Button>\n        {\n          toggle && this.props.sol()\n        }\n      </>\n    );\n  }\n}\n\nexport default SolutionButton;","import React from \"react\";\nimport withLayout from \"../../components/withLayout\";\nimport MathJax from 'react-mathjax-preview';\nimport SyntaxHighlighter from 'react-syntax-highlighter';\nimport { docco } from 'react-syntax-highlighter/dist/esm/styles/hljs';\nimport Image from 'react-bootstrap/Image'\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport SolutionButton from '../../components/SolutionButton';\n\n\nfunction solEx1() {\n  return (\n    <div>\n      <SyntaxHighlighter language=\"python\" style={docco}>\n        {\n          \"\\\"\\\"\\\"Solución Ejercicio 1.\\n\"\n          + \"\\n\"\n          + \"Desafío Latam: Introducción a Python 2020\\n\"\n          + \"\\\"\\\"\\\"\\n\"\n          + \"import sys\\n\"\n          + \"\\n\"\n          + \"\\n\"\n          + \"deposito = float(sys.argv[1])\\n\"\n          + \"\\n\"\n          + \"# 4% de interés anual\\n\"\n          + \"intereses = 1.04\\n\"\n          + \"\\n\"\n          + \"balance = intereses * deposito\\n\"\n          + \"print(f\\\"El balance al año 1 es: {round(balance, 2)}\\\")\\n\"\n          + \"\\n\"\n          + \"balance = intereses * balance\\n\"\n          + \"print(f\\\"El balance al año 2 es: {round(balance, 2)}\\\")\\n\"\n          + \"\\n\"\n          + \"balance = intereses * balance\\n\"\n          + \"print(f\\\"El balance al año 3 es: {round(balance, 2)}\\\")\\n\"\n        }\n      </SyntaxHighlighter>\n\n      <p>Por ejemplo, <code>python ejercicio1.py 1000</code></p>\n\n      <SyntaxHighlighter language=\"shell\" style={docco}>\n        {\n          \"> python ejemplo_argv.py 1000\\n\"\n          + \"El balance al año 1 es: 1040.0\\n\"\n          + \"El balance al año 2 es: 1081.6\\n\"\n          + \"El balance al año 3 es: 1124.86\"\n        }\n      </SyntaxHighlighter>\n\n    </div>\n  )\n}\n\nfunction solEx3() {\n  return (\n    <div>\n      <SyntaxHighlighter language=\"python\" style={docco}>\n        {\n          \"\\\"\\\"\\\"Solución Ejercicio 3.\\n\"\n          + \"\\n\"\n          + \"Desafío Latam: Introducción a Python 2020\\n\"\n          + \"\\\"\\\"\\\"\\n\"\n          + \"import sys\\n\"\n          + \"\\n\"\n          + \"\\n\"\n          + \"# Se asumirá que peso y altura son ingresados en kg y m respectivamente\\n\"\n          + \"peso = float(sys.argv[1])\\n\"\n          + \"altura = float(sys.argv[2])\\n\"\n          + \"\\n\"\n          + \"imc = round(peso / altura ** 2, 2)\\n\"\n          + \"\\n\"\n          + \"print(f\\\"Su IMC es: {imc}\\\")\\n\"\n        }\n      </SyntaxHighlighter>\n    </div>\n  )\n}\n\n\nfunction solEx5() {\n  return (\n    <div>\n      <SyntaxHighlighter language=\"python\" style={docco}>\n        {\n          \"\\\"\\\"\\\"Solución Ejercicio 5.\\n\"\n          + \"\\n\"\n          + \"Desafío Latam: Introducción a Python 2020\\n\"\n          + \"\\\"\\\"\\\"\\n\"\n          + \"import sys\\n\"\n          + \"\\n\"\n          + \"\\n\"\n          + \"n = int(sys.argv[1])\\n\"\n          + \"\\n\"\n          + \"unidades = n % 10\\n\"\n          + \"decenas = (n // 10) % 10\\n\"\n          + \"centenas = (n // 100) % 10\\n\"\n          + \"millares = (n // 1000) % 10\\n\"\n          + \"suma = unidades + decenas + centenas + millares\\n\"\n          + \"\\n\"\n          + \"print(f\\\"Su número {n}: {millares} + {centenas} + {decenas} + {unidades}\\\")\\n\"\n          + \"print(f\\\"La suma es {suma}\\\")\\n\"\n        }\n      </SyntaxHighlighter>\n    </div>\n  )\n}\n\n\nfunction solEx7() {\n  return (\n    <div>\n      <SyntaxHighlighter language=\"python\" style={docco}>\n        {\n          \"\\\"\\\"\\\"Solución Ejercicio 7.\\n\"\n          + \"\\n\"\n          + \"Desafío Latam: Introducción a Python 2020\\n\"\n          + \"\\\"\\\"\\\"\\n\"\n          + \"import sys\\n\"\n          + \"\\n\"\n          + \"\\n\"\n          + \"mes = sys.argv[1].lower()\\n\"\n          + \"\\n\"\n          + \"tiene_30_dias = (\\n\"\n          + \"    mes == \\\"abril\\\" or mes == \\\"junio\\\" or mes == \\\"septiembre\\\" or mes == \\\"noviembre\\\"\\n\"\n          + \")\\n\"\n          + \"\\n\"\n          + \"tiene_31_dias = (\\n\"\n          + \"    mes == \\\"enero\\\"\\n\"\n          + \"    or mes == \\\"marzo\\\"\\n\"\n          + \"    or mes == \\\"mayo\\\"\\n\"\n          + \"    or mes == \\\"julio\\\"\\n\"\n          + \"    or mes == \\\"agosto\\\"\\n\"\n          + \"    or mes == \\\"octubre\\\"\\n\"\n          + \"    or mes == \\\"diciembre\\\"\\n\"\n          + \")\\n\"\n          + \"\\n\"\n          + \"if tiene_30_dias:\\n\"\n          + \"    print(f\\\"{mes.capitalize()} tiene 30 dias\\\")\\n\"\n          + \"elif tiene_31_dias:\\n\"\n          + \"    print(f\\\"{mes.capitalize()} tiene 31 dias\\\")\\n\"\n          + \"elif mes == \\\"febrero\\\":\\n\"\n          + \"    print(f\\\"{mes.capitalize()} tiene 28 o 29 dias\\\")\\n\"\n          + \"else:\\n\"\n          + \"    print(f\\\"{mes.capitalize()} no es un mes válido\\\")\\n\"\n        }\n      </SyntaxHighlighter>\n    </div>\n  )\n}\n\nfunction solEx9() {\n  return (\n    <div>\n      <SyntaxHighlighter language=\"python\" style={docco}>\n        {\n          \"\\\"\\\"\\\"Solución Ejercicio 9.\\n\"\n          + \"\\n\"\n          + \"Desafío Latam: Introducción a Python 2020\\n\"\n          + \"\\\"\\\"\\\"\\n\"\n          + \"import sys\\n\"\n          + \"\\n\"\n          + \"\\n\"\n          + \"casilla = sys.argv[1]\\n\"\n          + \"\\n\"\n          + \"# Filas empiezan desde 1 siguiendo la numeración del cuadro\\n\"\n          + \"fila = int(casilla[1])\\n\"\n          + \"\\n\"\n          + \"# Columnas empezaran desde 0, pues le restamos el valor del caracter 'a'\\n\"\n          + \"# que es 97 (también se podría implementar con varios ifs)\\n\"\n          + \"columna = ord(casilla[0]) - ord(\\\"a\\\")\\n\"\n          + \"\\n\"\n          + \"fila_par = fila % 2 == 0\\n\"\n          + \"columna_par = columna % 2 == 0\\n\"\n          + \"\\n\"\n          + \"if not fila_par:\\n\"\n          + \"    if columna_par:\\n\"\n          + \"        color = \\\"negro\\\"\\n\"\n          + \"    else:\\n\"\n          + \"        color = \\\"blanco\\\"\\n\"\n          + \"else:\\n\"\n          + \"    if columna_par:\\n\"\n          + \"        color = \\\"blanco\\\"\\n\"\n          + \"    else:\\n\"\n          + \"        color = \\\"negro\\\"\\n\"\n          + \"\\n\"\n          + \"print(f\\\"La casilla {casilla} es de color {color}\\\")\\n\"\n\n        }\n      </SyntaxHighlighter>\n\n      <p>Ejemplo de usos:</p>\n\n      <SyntaxHighlighter language=\"shell\" style={docco}>\n        {\n          \">python ejemplo_argv.py h8\\n\"\n          + \"La casilla h8 es de color negro\\n\"\n          + \">python ejemplo_argv.py c7\\n\"\n          + \"La casilla c7 es de color negro\\n\"\n          + \">python ejemplo_argv.py c6\\n\"\n          + \"La casilla c6 es de color blanco\\n\"\n          + \">python ejemplo_argv.py b1\\n\"\n          + \"La casilla b1 es de color blanco\\n\"\n          + \">python ejemplo_argv.py b2\\n\"\n          + \"La casilla b2 es de color negro\\n\"\n          + \">python ejemplo_argv.py b3\\n\"\n          + \"La casilla b3 es de color blanco\\n\"\n        }\n      </SyntaxHighlighter>\n    </div>\n  )\n}\n\n\nfunction WeekOneRepaso() {\n\n  return (\n    <div className='container'>\n      <h1 className='mt-5'>Introducción a Python: Ejercicios Repaso</h1>\n      <p className='lead'>\n        Con la finalidad de que todos estén entendiendo la materia y que nadie se \"pierda\" en el camino, se deja un conjunto de ejercicios\n        de repaso. La idea es que \"suelten la mano\" y vayan acostumbrándose a escribir código y a las características del lenguaje de\n        programación <code>python</code>.\n            </p>\n\n      <h2>Ejercicios</h2>\n      <h3>Ejercicio 1</h3>\n\n      <p>Supongamos que has abierto una nueva cuenta de ahorro que te da una ganancia de 4 % de interés anual. Los intereses ganados\n      se pagan al final de cada año y se agregan al balance de la cuenta de ahorro. Escribe un progama que lea la cantidad de dinero\n      depositada en la cuenta inicialmente. El programa debe calcular y mostrar el balance de la cuenta de ahorros luego de 1, 2 y 3\n      años. Mostrar cada cantidad redondeada al segundo decimal (puede buscar la función <code>round</code>).</p>\n\n      <SolutionButton sol={solEx1}></SolutionButton>\n\n      <h3>Ejercicio 2</h3>\n      <p>La ley de los gases ideales es una aproximación matemática del comportamiento de los gases cuando la presión, volumen y temperatura\n      cambian. Normalmente se escribe como:</p>\n\n      <MathJax math={`$$PV = nRT$$`} />\n\n      <p>\n        <MathJax math={\n          `Donde $P$ es la presión en Pascales, $V$ es el volumen en litros, $n$  es\n        la cantidad de sustancia en moles, $R$ es la constante de los gases ideales, igual\n        a $8.314 \\\\frac{J}{molK}$, y $T$ es la temperatura en Kelvin.`} />\n      </p>\n\n      <p>Escriba un programa que calcule la cantidad de gas en moles dadas la presión, el volumen y la temperatura.</p>\n\n      <h3>Ejercicio 3</h3>\n      <p>Escriba un programa calcule el índice de masa corporal (IMC) de una persona, este puede ser calculado como:</p>\n\n      <MathJax math={`$$IMC = \\\\frac{Peso}{altura^2}$$`} />\n\n      <p>El programa debe recibir el peso (kg) y la estatura (m) de la persona.</p>\n\n      <SolutionButton sol={solEx3}></SolutionButton>\n\n      <h3>Ejercicio 4</h3>\n      <p>Escriba un programa que dada una temperatura en grados Celsius, muestre la temperatura en grandos Farenheit y en Kelvin. Las\n      fórmulas de transformación las puede encontrar en internet. Para probar su programa, puede tomar como ejemplo, que 25 grados\n      celsius son aproximadamente 77 Farenheit y 298 K. </p>\n\n      <h3>Ejercicio 5</h3>\n      <p>Escriba un programa que lea un entero de 4 dígitos y muestre la suma de los dígitos del número. Por ejemplo, si el usuario\n      ingresa 3141, entonces el programa debiese mostrar <code>3 + 1 + 4 + 1 = 9</code>. Por ahora asuma que siempre serán 4 dígitos. Queda\n      como pregunta ¿Cómo podría generalizar para cualquier cantidad de dígitos?</p>\n\n      <SolutionButton sol={solEx5}></SolutionButton>\n\n      <h3>Ejercicio 6</h3>\n      <p>Escriba un programa que lea un entero. El programa deberá mostrar si el número ingresado es par o impar.</p>\n\n      <h3>Ejercicio 7</h3>\n      <p>Escriba un programa que dado el nombre de un mes, imprima en pantalla la cantidad de días de dicho mes. En caso de que el mes\n      sea febrero, su programa deberá imprimir <code>28 o 29 días</code>.</p>\n\n      <SolutionButton sol={solEx7}></SolutionButton>\n\n      <h3>Ejercicio 8</h3>\n      <p>Los triángulos se clasifican en base al largo de sus lados como equilátero, isósceles o escaleno. En un triángulo equilátero\n      los 3 lados tienen la misma longitud. En un triángulo isósceles, 2 lados tienen la misma longitud y el otro lado tiene una longitud\n      diferente. En un triángulo escaleno todos los lados son de distinta longitud. Escriba un programa que dados los largos de los lados\n      de un triángulo, diga si es equilátero, isósceles o escaleno. Su programa debe también chequear si el triángulo es válido (puede aplicar\n      la desigualdad triángular para chequear esto).</p>\n\n      <h3>Ejercicio 9</h3>\n      <p>Las posiciones en un tablero de ajedrez se identifican con una letra y un número. La letra representa la columna, y el número la fila\n      tal y como se muestra en la siguiente figura:</p>\n\n      <Row className=\"justify-content-md-center\">\n        <Col xs={12} sm={12} md={12}>\n          <Image src={process.env.PUBLIC_URL + '/imgs/tablero.png'} fluid />\n        </Col>\n      </Row>\n\n      <p>Escriba un programa que lea la posición de una casilla de un tablero de ajedrez y determine si es blanca o negra. Para simplificar el problema,\n      se asumirá que el usuario ingresará una casilla válida, por lo que, no es necesario hacer chequear si la entrada es correcta o no.</p>\n\n      <SolutionButton sol={solEx9}></SolutionButton>\n      <h3>Ejercicio 10</h3>\n\n      <p>La ruleta es un juego típico de casino. Consiste en una rueda de 38 espacios. De estos espacios, 18 son negros, 18 rojos y\n      dos son verdes. Los espacios verdes estan etiquetados como 0 y 00. Los espacios rojos tienen los siguentes números: 1, 3, 5, 7, 9,\n      12, 14, 16, 18, 19, 21, 23, 25, 27, 30, 32, 34 y 36. El resto de los enteros entre 1 y 36 se usan para los espacios negros.</p>\n\n      <p>Se pueden realizar diferentes apuestas. Para propósitos del ejercicios, consideraremos el siguiente subconjunto de apuestas:</p>\n\n      <ul>\n        <li>Número (1 a 36, 0 o 00)</li>\n        <li>Rojo vs Negro</li>\n        <li>Par vs Impar (en este caso 0 y 00 no produce ganancia si se apostó par)</li>\n        <li>1 a 18 vs 19 a 36</li>\n      </ul>\n\n      <p>\n        Escriba un programa que simule el giro de una ruleta. Muestre el espacio que fue escoglido y todas las apuestas ganadoras. Por ejemplo,\n        si 13 es elegido, su programa debe mostrar:\n      </p>\n\n      <SyntaxHighlighter language=\"shell\" style={docco}>\n        {\n          \"El giro de la ruleta terminó en 13\\n\"\n          + \"Pagar al 13\\n\"\n          + \"Pagar a color negro\\n\"\n          + \"Pagar a apuesta impar\\n\"\n          + \"Pagar a apuestas 1 a 18\\n\"\n\n        }\n      </SyntaxHighlighter>\n\n      <p>Si la simulación termina en 0 o 00, el programa debe mostrar <code>Pagar a 0</code> o <code>Pagar a 00</code>, sin mostrar nada más.\n      Ya que otras apuestas no ganan en este caso.</p>\n    </div>\n  )\n}\n\nexport default withLayout(WeekOneRepaso);","import './App.css'\nimport React from \"react\";\nimport { HashRouter as Router, Switch, Route } from \"react-router-dom\";\n\nimport Home from \"./pages/Home\";\nimport About from \"./pages/About\";\nimport Setup from \"./pages/lectures/Setup\";\nimport PythonMisc from \"./pages/lectures/PythonMisc\";\nimport WeekOne from \"./pages/lectures/WeekOne\";\nimport WeekTwo from \"./pages/lectures/WeekTwo\";\nimport WeekThree from \"./pages/lectures/WeekThree\";\nimport WeekFour from \"./pages/lectures/WeekFour\";\nimport WeekFive from \"./pages/data_science/WeekFive\";\nimport WeekSix from \"./pages/data_science/WeekSix\";\nimport WeekSeven from \"./pages/data_science/WeekSeven\";\nimport WeekOneRepaso from \"./pages/lectures/WeekOneRepaso\";\n\n\nexport default class App extends React.Component {\n\n  componentDidMount() {\n    // Decode entities in the URL\n    // Sometimes a URL like #/foo#bar will be encoded as #/foo%23bar\n    window.location.hash = window.decodeURIComponent(window.location.hash);\n    const scrollToAnchor = () => {\n      const hashParts = window.location.hash.split('#');\n      if (hashParts.length > 2) {\n        const hash = hashParts.slice(-1)[0];\n        document.querySelector(`#${hash}`).scrollIntoView();\n      }\n    };\n    scrollToAnchor();\n    window.onhashchange = scrollToAnchor;\n  }\n\n  render() {\n    return (\n      <Router basename=\"/\">\n        <Switch>\n          <Route path=\"/about\">\n            <About />\n          </Route>\n          <Route path=\"/python_misc\">\n            <PythonMisc />\n          </Route>\n          <Route path=\"/setup\">\n            <Setup />\n          </Route>\n          <Route path=\"/week1\">\n            <WeekOne />\n          </Route>\n          <Route path=\"/week2\">\n            <WeekTwo />\n          </Route>\n          <Route path=\"/week3\">\n            <WeekThree />\n          </Route>\n          <Route path=\"/week4\">\n            <WeekFour />\n          </Route>\n          <Route path=\"/week5\">\n            <WeekFive />\n          </Route>\n          <Route path=\"/week6\">\n            <WeekSix />\n          </Route>\n          <Route path=\"/week7\">\n            <WeekSeven />\n          </Route>\n          <Route path=\"/week1_repaso\">\n            <WeekOneRepaso />\n          </Route>\n          <Route path=\"/\">\n            <Home />\n          </Route>\n        </Switch>\n      </Router>\n    );\n  }\n\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}